# --- –û–ø–∏—Å–∞–Ω–∏–µ ---
# –°–∫—Ä–∏–ø—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ downloaded_attachments.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Vertex AI (gemini-2.5-flash) –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–ª–æ–∂–µ–Ω–∏–π:
# - –§–æ—Ç–æ/—Å—Ç–∏–∫–µ—Ä—ã: –ø–æ–ª–Ω–æ–µ OCR –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
# - –ì–æ–ª–æ—Å–æ–≤—ã–µ: –ø–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ä–µ—á–∏
# - –í–ò–î–ï–û: —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 2 –º–∏–Ω—É—Ç + –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ—Ä—è–¥–∞ —á–µ—Ä–µ–∑ Gemini
# - –†–µ–ø–æ—Å—Ç—ã/–º—É–∑—ã–∫–∞: –∞–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
# –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –†–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ.
# --- –ö–æ–Ω–µ—Ü –æ–ø–∏—Å–∞–Ω–∏—è ---

import os
import json
import logging
import base64
import mimetypes
import subprocess
from datetime import datetime
from typing import Dict, List, Any, Optional
import vertexai
from vertexai.generative_models import GenerativeModel, Part, SafetySetting, HarmCategory
from google.oauth2 import service_account
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('attachment_analysis.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AttachmentAnalyzer:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–ª–æ–∂–µ–Ω–∏–π"""
        self.project_id = None
        self.location = "us-central1"  # –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        self.model_name = "gemini-2.5-flash"  # –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å Gemini 2.5
        self.model = None
        
        # –ü–∞–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã
        self.download_dir = "downloaded_attachments"
        self.results_dir = "analysis_results"
        self.ensure_results_directory()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
        self.safety_settings = [
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_HARASSMENT,
                threshold=SafetySetting.HarmBlockThreshold.BLOCK_NONE,
            ),
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                threshold=SafetySetting.HarmBlockThreshold.BLOCK_NONE,
            ),
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                threshold=SafetySetting.HarmBlockThreshold.BLOCK_NONE,
            ),
            SafetySetting(
                category=HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                threshold=SafetySetting.HarmBlockThreshold.BLOCK_NONE,
            ),
        ]
        
        # –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.prompts = {
            'photo': """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ. 
                       –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏–∑–≤–ª–µ–∫–∏ –í–ï–°–¨ –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç (OCR). 
                       –ï—Å–ª–∏ —ç—Ç–æ —á–µ–∫ - —É–∫–∞–∂–∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, —Ü–µ–Ω—ã, –æ–±—â—É—é —Å—É–º–º—É. 
                       –ï—Å–ª–∏ —ç—Ç–æ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ - –æ–ø–∏—à–∏ –æ—à–∏–±–∫—É –∏ –∫–æ–¥.
                       –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç - –∏–∑–≤–ª–µ–∫–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç.
                       –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.""",
                       
            'audio_message': """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ü–û–õ–ù–û–°–¢–¨–Æ.
                               –ü–µ—Ä–µ–≤–µ–¥–∏ –≤—Å—é —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.
                               –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.""",
                               
            'video': """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –≤–∏–¥–µ–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:
                       1. –°–û–î–ï–†–ñ–ê–ù–ò–ï: –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ö—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç? –û —á–µ–º –≥–æ–≤–æ—Ä—è—Ç?
                       2. –í–ò–ó–£–ê–õ–¨–ù–û–ï: –û–ø–∏—à–∏ –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É, –æ–±—ä–µ–∫—Ç—ã, –¥–µ–π—Å—Ç–≤–∏—è
                       3. –ê–£–î–ò–û: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —Ä–µ—á—å –∏ –∑–≤—É–∫–∏
                       4. –¢–ï–ö–°–¢ –ù–ê –≠–ö–†–ê–ù–ï: –ò–∑–≤–ª–µ–∫–∏ –í–ï–°–¨ –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç
                       5. –ö–û–ù–¢–ï–ö–°–¢: –¢–µ–º–∞, –∂–∞–Ω—Ä, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–∏–¥–µ–æ
                       –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.""",
                       
            'sticker': """–û–ø–∏—à–∏ —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä.
                         –ï—Å–ª–∏ –Ω–∞ –Ω–µ–º –µ—Å—Ç—å —Ç–µ–∫—Å—Ç - –∏–∑–≤–ª–µ–∫–∏ –µ–≥–æ –ü–û–õ–ù–û–°–¢–¨–Æ.
                         –û–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
                         –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.""",
                         
            'wall': """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ä–µ–ø–æ—Å—Ç.
                      –û–ø–∏—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫, —Ç–µ–º—É, –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.
                      –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞ - –æ–ø–∏—à–∏ –∏—Ö.
                      –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.""",
                      
            'audio': """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏.
                       –û–ø–∏—à–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –Ω–∞–∑–≤–∞–Ω–∏–µ, –∂–∞–Ω—Ä –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.
                       –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
        }
        
    def ensure_results_directory(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not os.path.exists(self.results_dir):
            os.makedirs(self.results_dir)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {self.results_dir}")
            
    def load_vertex_ai_credentials(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π Vertex AI"""
        try:
            # –ò—â–µ–º JSON —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
            json_files = [f for f in os.listdir('.') if f.endswith('.json') and 'key' in f.lower()]
            
            if not json_files:
                print("\n" + "="*60)
                print("–ù–ê–°–¢–†–û–ô–ö–ê VERTEX AI –ö–õ–Æ–ß–ï–ô")
                print("="*60)
                print("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å JSON —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ –æ—Ç Google Cloud.")
                print("–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:")
                print("1. –ü–æ–º–µ—Å—Ç–∏—Ç–µ JSON —Ñ–∞–π–ª –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É (—Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º)")
                print("2. –ù–∞–∑–æ–≤–∏—Ç–µ —Ñ–∞–π–ª —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –∏–º–µ–Ω–∏ –±—ã–ª–æ —Å–ª–æ–≤–æ 'key'")
                print("   –ù–∞–ø—Ä–∏–º–µ—Ä: 'my-project-key.json' –∏–ª–∏ 'vertex-ai-key.json'")
                print("\n–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_APPLICATION_CREDENTIALS")
                print("="*60)
                raise ValueError("JSON —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ Vertex AI –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            credentials_path = json_files[0]
            logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –∫–ª—é—á–µ–π: {credentials_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
            credentials = service_account.Credentials.from_service_account_file(credentials_path)
            
            # –ß–∏—Ç–∞–µ–º project_id –∏–∑ —Ñ–∞–π–ª–∞
            with open(credentials_path, 'r') as f:
                key_data = json.load(f)
                self.project_id = key_data.get('project_id')
                
            if not self.project_id:
                raise ValueError("project_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON —Ñ–∞–π–ª–µ")
                
            logger.info(f"Vertex AI –∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–µ–∫—Ç: {self.project_id}")
            return credentials
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π Vertex AI: {e}")
            raise
            
    def initialize_vertex_ai(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vertex AI"""
        try:
            credentials = self.load_vertex_ai_credentials()
            
            print(f"\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê VERTEX AI:")
            print(f"   –ü—Ä–æ–µ–∫—Ç: {self.project_id}")
            print(f"   –†–µ–≥–∏–æ–Ω: {self.location}")
            print(f"   –ú–æ–¥–µ–ª—å: {self.model_name}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vertex AI
            vertexai.init(
                project=self.project_id,
                location=self.location,
                credentials=credentials
            )
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å
            self.model = GenerativeModel(
                model_name=self.model_name,
                safety_settings=self.safety_settings
            )
            
            logger.info(f"Vertex AI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ú–æ–¥–µ–ª—å: {self.model_name}")
            print(f"   ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vertex AI: {e}")
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ–≥–∏–æ–Ω—ã
            alternative_locations = ["europe-west1", "asia-northeast1", "us-east1"]
            for alt_location in alternative_locations:
                try:
                    print(f"\nüîÑ –ü—Ä–æ–±—É–µ–º —Ä–µ–≥–∏–æ–Ω: {alt_location}")
                    self.location = alt_location
                    vertexai.init(
                        project=self.project_id,
                        location=self.location,
                        credentials=credentials
                    )
                    self.model = GenerativeModel(
                        model_name=self.model_name,
                        safety_settings=self.safety_settings
                    )
                    print(f"   ‚úÖ –†–µ–≥–∏–æ–Ω {alt_location} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    logger.info(f"Vertex AI —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–≥–∏–æ–Ω–µ: {alt_location}")
                    return
                except Exception as alt_e:
                    print(f"   ‚ùå –†–µ–≥–∏–æ–Ω {alt_location} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {alt_e}")
                    continue
                    
            raise Exception("–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã Vertex AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
    def download_and_trim_video(self, video_url: str, output_path: str, duration_seconds: int = 120) -> bool:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            logger.info(f"–°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ: {video_url}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            temp_video = output_path.replace('.mp4', '_temp.mp4')
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            response = requests.get(video_url, stream=True, timeout=30)
            response.raise_for_status()
            
            with open(temp_video, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            logger.info(f"–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {temp_video}")
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é ffmpeg
            ffmpeg_cmd = [
                'ffmpeg',
                '-i', temp_video,
                '-t', str(duration_seconds),  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                '-c:v', 'libx264',  # –ö–æ–¥–µ–∫ –≤–∏–¥–µ–æ
                '-c:a', 'aac',      # –ö–æ–¥–µ–∫ –∞—É–¥–∏–æ
                '-y',               # –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                output_path
            ]
            
            logger.info(f"–û–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –∫–æ–º–∞–Ω–¥–æ–π: {' '.join(ffmpeg_cmd)}")
            
            result = subprocess.run(
                ffmpeg_cmd,
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
            )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_video):
                os.remove(temp_video)
            
            if result.returncode == 0:
                logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–µ–∑–∞–Ω–æ: {output_path}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è/–æ–±—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return False

    def load_file_as_part(self, file_path: str, attachment_type: str) -> Optional[Part]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∫–∞–∫ Part –¥–ª—è Vertex AI"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø
            mime_type, _ = mimetypes.guess_type(file_path)
            
            if attachment_type == 'photo':
                if not mime_type or not mime_type.startswith('image/'):
                    mime_type = 'image/jpeg'
            elif attachment_type == 'audio_message':
                if not mime_type or not mime_type.startswith('audio/'):
                    mime_type = 'audio/ogg'
            elif attachment_type == 'sticker':
                if not mime_type or not mime_type.startswith('image/'):
                    mime_type = 'image/png'
            elif attachment_type == 'video':
                if not mime_type or not mime_type.startswith('video/'):
                    mime_type = 'video/mp4'
                    
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'rb') as f:
                file_data = f.read()
                
            # –°–æ–∑–¥–∞–µ–º Part
            part = Part.from_data(data=file_data, mime_type=mime_type)
            logger.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ Part: {file_path} ({mime_type})")
            return part
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return None
            
    def analyze_attachment(self, file_path: str, attachment_type: str, metadata: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è"""
        try:
            logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {attachment_type}: {file_path}")
            
            result = {
                'file': file_path,
                'type': attachment_type,
                'timestamp': datetime.now().isoformat(),
                'metadata': metadata,
                'analysis': None,
                'error': None
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–∏–ø–∞
            prompt = self.prompts.get(attachment_type, "–û–ø–∏—à–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ.")
            
            if attachment_type in ['photo', 'audio_message', 'sticker']:
                # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –º–æ–¥–µ–ª—å
                if os.path.exists(file_path):
                    part = self.load_file_as_part(file_path, attachment_type)
                    if part:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
                        response = self.model.generate_content([prompt, part])
                        result['analysis'] = response.text
                    else:
                        result['error'] = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                else:
                    result['error'] = f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"
                    
            elif attachment_type == 'video':
                # –î–ª—è –≤–∏–¥–µ–æ: —Å–∫–∞—á–∏–≤–∞–µ–º, –æ–±—Ä–µ–∑–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Gemini
                result['analysis'] = self.analyze_video_content(file_path, metadata)
                    
            elif attachment_type in ['wall', 'audio']:
                # –î–ª—è —ç—Ç–∏—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata_analysis = self.analyze_metadata(metadata, attachment_type)
                result['analysis'] = metadata_analysis
                
            else:
                result['error'] = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è: {attachment_type}"
                
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_path}: {e}")
            return {
                'file': file_path,
                'type': attachment_type,
                'timestamp': datetime.now().isoformat(),
                'metadata': metadata,
                'analysis': None,
                'error': str(e)
            }
            
    def get_video_url_via_api(self, video_id: int, owner_id: int, access_key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ VK API"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å URL —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ VK API
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã VK API
            api_url = "https://api.vk.com/method/video.get"
            params = {
                'videos': f"{owner_id}_{video_id}_{access_key}",
                'v': '5.131',
                'access_token': 'service'  # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≤–∏–¥–µ–æ
            }
            
            response = requests.get(api_url, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if 'response' in data and 'items' in data['response'] and data['response']['items']:
                    video_data = data['response']['items'][0]
                    if 'files' in video_data:
                        files = video_data['files']
                        for quality in ['mp4_720', 'mp4_480', 'mp4_360', 'mp4_240']:
                            if quality in files:
                                return files[quality]
            
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ API")
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —á–µ—Ä–µ–∑ API: {e}")
            return None

    def analyze_video_content(self, json_file_path: str, metadata: Dict) -> str:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ Gemini"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –∏–∑ JSON —Ñ–∞–π–ª–∞
            original_data = metadata.get('original_data', {})
            video_url = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
            processing = original_data.get('processing', 0)
            if processing == 1:
                logger.warning("–í–∏–¥–µ–æ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ VK, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ")
                return f"‚ö†Ô∏è –í–ò–î–ï–û –í –û–ë–†–ê–ë–û–¢–ö–ï\n\n{self.analyze_metadata(metadata, 'video')}"
            
            # –ò—â–µ–º URL –≤–∏–¥–µ–æ –≤ –¥–∞–Ω–Ω—ã—Ö
            if 'files' in original_data:
                files = original_data['files']
                # –ë–µ—Ä–µ–º –≤–∏–¥–µ–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                for quality in ['mp4_720', 'mp4_480', 'mp4_360', 'mp4_240']:
                    if quality in files:
                        video_url = files[quality]
                        break
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è URL –≤–∏–¥–µ–æ
            if not video_url:
                for field in ['player', 'external', 'mp4_720', 'mp4_480', 'mp4_360', 'mp4_240']:
                    if field in original_data and original_data[field]:
                        video_url = original_data[field]
                        break
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å URL —á–µ—Ä–µ–∑ VK API
            if not video_url:
                video_id = original_data.get('id')
                owner_id = original_data.get('owner_id')
                access_key = original_data.get('access_key')
                
                if video_id and owner_id and access_key:
                    logger.info(f"–ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ API: {owner_id}_{video_id}")
                    video_url = self.get_video_url_via_api(video_id, owner_id, access_key)
                        
            if not video_url:
                logger.error("URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω - –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –í–ò–î–ï–û –ù–ï–í–û–ó–ú–û–ñ–ï–ù")
                return f"‚ùå –ê–ù–ê–õ–ò–ó –í–ò–î–ï–û –ù–ï –í–´–ü–û–õ–ù–ï–ù\n\n–ü—Ä–∏—á–∏–Ω–∞: URL –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ API\n\n{self.analyze_metadata(metadata, 'video')}"
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            video_filename = os.path.basename(json_file_path).replace('.json', '.mp4')
            video_path = os.path.join(self.download_dir, video_filename)
            
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {video_url}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–µ–∑–∞–µ–º –≤–∏–¥–µ–æ –¥–æ 2 –º–∏–Ω—É—Ç
            if self.download_and_trim_video(video_url, video_path, duration_seconds=120):
                logger.info(f"–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {video_path}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Gemini
                part = self.load_file_as_part(video_path, 'video')
                if part:
                    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–¥–µ–æ
                    video_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –≤–∏–¥–µ–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ:
                    
                    1. –°–û–î–ï–†–ñ–ê–ù–ò–ï: –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–∏–¥–µ–æ? –ö—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç? –û —á–µ–º –≥–æ–≤–æ—Ä—è—Ç?
                    2. –í–ò–ó–£–ê–õ–¨–ù–û–ï: –û–ø–∏—à–∏ –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É, –æ–±—ä–µ–∫—Ç—ã, –¥–µ–π—Å—Ç–≤–∏—è
                    3. –ê–£–î–ò–û: –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—á—å - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã
                    4. –¢–ï–ö–°–¢ –ù–ê –≠–ö–†–ê–ù–ï: –ï—Å–ª–∏ –µ—Å—Ç—å –ª—é–±–æ–π —Ç–µ–∫—Å—Ç - –∏–∑–≤–ª–µ–∫–∏ –µ–≥–æ –ü–û–õ–ù–û–°–¢–¨–Æ
                    5. –ö–û–ù–¢–ï–ö–°–¢: –ö–∞–∫–∞—è —Ç–µ–º–∞/–∂–∞–Ω—Ä –≤–∏–¥–µ–æ? –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ, –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ?
                    6. –≠–ú–û–¶–ò–ò: –ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤–∏–¥–µ–æ?
                    
                    –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ."""
                    
                    response = self.model.generate_content([video_prompt, part])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ –∞–Ω–∞–ª–∏–∑—É
                    title = original_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    description = original_data.get('description', '')
                    duration = original_data.get('duration', 0)
                    views = original_data.get('views', 0)
                    
                    full_analysis = f"üé• –í–ò–î–ï–û –ê–ù–ê–õ–ò–ó: {title}\n\n"
                    full_analysis += f"üìä –ú–ï–¢–ê–î–ê–ù–ù–´–ï:\n"
                    if description:
                        full_analysis += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                    if duration:
                        full_analysis += f"   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥\n"
                    if views:
                        full_analysis += f"   –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}\n"
                    
                    full_analysis += f"\nü§ñ –ê–ù–ê–õ–ò–ó –°–û–î–ï–†–ñ–ò–ú–û–ì–û:\n{response.text}"
                    
                    logger.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {video_path}")
                    return full_analysis
                else:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    return self.analyze_metadata(metadata, 'video')
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
                return self.analyze_metadata(metadata, 'video')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ: {e}")
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ: {str(e)}\n\n{self.analyze_metadata(metadata, 'video')}"

    def analyze_metadata(self, metadata: Dict, attachment_type: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–ø–æ–≤ –±–µ–∑ –ø—Ä—è–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            original_data = metadata.get('original_data', {})
            
            if attachment_type == 'video':
                title = original_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                description = original_data.get('description', '')
                duration = original_data.get('duration', 0)
                views = original_data.get('views', 0)
                
                analysis = f"–í–∏–¥–µ–æ: '{title}'"
                if description:
                    analysis += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
                if duration:
                    analysis += f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥"
                if views:
                    analysis += f"\n–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}"
                    
                return analysis
                
            elif attachment_type == 'wall':
                text = original_data.get('text', '')
                from_id = original_data.get('from_id', '')
                post_type = original_data.get('post_type', '')
                
                analysis = f"–†–µ–ø–æ—Å—Ç"
                if from_id:
                    analysis += f" –æ—Ç ID {from_id}"
                if text:
                    analysis += f"\n–¢–µ–∫—Å—Ç: {text}"
                if post_type:
                    analysis += f"\n–¢–∏–ø –ø–æ—Å—Ç–∞: {post_type}"
                    
                return analysis
                
            elif attachment_type == 'audio':
                artist = original_data.get('artist', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
                title = original_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                duration = original_data.get('duration', 0)
                
                analysis = f"–ú—É–∑—ã–∫–∞: {artist} - {title}"
                if duration:
                    analysis += f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥"
                    
                return analysis
                
            return "–ê–Ω–∞–ª–∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            
    def find_attachments(self) -> Dict[str, List[Dict]]:
        """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π"""
        attachments = {
            'photo': [],
            'video': [],
            'sticker': [],
            'wall': [],
            'audio': [],
            'audio_message': []
        }
        
        if not os.path.exists(self.download_dir):
            logger.warning(f"–ü–∞–ø–∫–∞ {self.download_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return attachments
            
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        report_path = os.path.join(self.download_dir, 'download_report.json')
        download_report = {}
        if os.path.exists(report_path):
            try:
                with open(report_path, 'r', encoding='utf-8') as f:
                    download_report = json.load(f)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –≤ –∫–æ—Ä–Ω–µ –ø–∞–ø–∫–∏ downloaded_attachments
        for filename in os.listdir(self.download_dir):
            file_path = os.path.join(self.download_dir, filename)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏ –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
            if os.path.isdir(file_path) or filename == 'download_report.json':
                continue
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            attachment_type = None
            metadata = {}
            
            if filename.startswith('photo_') and filename.endswith('.jpg'):
                attachment_type = 'photo'
            elif filename.startswith('voice_') and filename.endswith('.mp3'):
                attachment_type = 'audio_message'
            elif filename.startswith('sticker_') and filename.endswith('.png'):
                attachment_type = 'sticker'
            elif filename.startswith('video_') and filename.endswith('.json'):
                attachment_type = 'video'
            elif filename.startswith('wall_') and filename.endswith('.json'):
                attachment_type = 'wall'
            elif filename.startswith('audio_') and filename.endswith('.json'):
                attachment_type = 'audio'
                
            if attachment_type:
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    'type': attachment_type,
                    'local_file': file_path,
                    'timestamp': datetime.now().isoformat()
                }
                
                # –î–ª—è JSON —Ñ–∞–π–ª–æ–≤ —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                if filename.endswith('.json'):
                    try:
                        with open(file_path, 'r', encoding='utf-8') as f:
                            file_content = json.load(f)
                            metadata['original_data'] = file_content
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞ {filename}: {e}")
                
                attachments[attachment_type].append({
                    'file': file_path,
                    'metadata': metadata
                })
                
        # –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –Ω–∞—à–ª–∏
        for att_type, files in attachments.items():
            if files:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {att_type}: {len(files)} —Ñ–∞–π–ª–æ–≤")
                
        return attachments
        
    def analyze_all_attachments(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π...")
        
        attachments = self.find_attachments()
        all_results = {}
        
        total_files = sum(len(files) for files in attachments.values())
        processed = 0
        
        for attachment_type, files in attachments.items():
            logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {attachment_type}: {len(files)} —Ñ–∞–π–ª–æ–≤")
            all_results[attachment_type] = []
            
            for file_info in files:
                processed += 1
                logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {processed}/{total_files}")
                
                result = self.analyze_attachment(
                    file_info['file'],
                    attachment_type,
                    file_info['metadata']
                )
                
                all_results[attachment_type].append(result)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.save_individual_result(result)
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        self.save_final_report(all_results)
        logger.info("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    def save_individual_result(self, result: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            filename = os.path.basename(result['file'])
            result_filename = f"analysis_{filename}.json"
            result_path = os.path.join(self.results_dir, result_filename)
            
            with open(result_path, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            
    def save_final_report(self, all_results: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            report = {
                'timestamp': datetime.now().isoformat(),
                'summary': {},
                'results': all_results
            }
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
            for attachment_type, results in all_results.items():
                total = len(results)
                successful = 0
                errors = 0
                partial = 0  # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
                
                for r in results:
                    if r.get('error'):
                        errors += 1
                    elif r.get('analysis'):
                        analysis = r.get('analysis', '')
                        if '‚ùå –ê–ù–ê–õ–ò–ó –í–ò–î–ï–û –ù–ï –í–´–ü–û–õ–ù–ï–ù' in analysis:
                            partial += 1
                        elif '‚ö†Ô∏è –í–ò–î–ï–û –í –û–ë–†–ê–ë–û–¢–ö–ï' in analysis:
                            partial += 1
                        else:
                            successful += 1
                    else:
                        errors += 1
                
                # –î–ª—è –≤–∏–¥–µ–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º–∏ —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
                actual_success_rate = (successful/total*100) if total > 0 else 0
                
                report['summary'][attachment_type] = {
                    'total': total,
                    'successful': successful,
                    'partial': partial,
                    'errors': errors,
                    'success_rate': f"{actual_success_rate:.1f}%",
                    'notes': f"–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {successful}, –¢–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {partial}, –û—à–∏–±–∫–∏: {errors}" if attachment_type == 'video' else None
                }
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            report_path = os.path.join(self.results_dir, 'final_analysis_report.json')
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(report, f, ensure_ascii=False, indent=2)
                
            logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
            
            # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            self.print_summary(report['summary'])
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ—Ç–∞
            self.create_bot_context(all_results)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            
    def create_bot_context(self, all_results: Dict):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞"""
        try:
            bot_context = {
                'timestamp': datetime.now().isoformat(),
                'attachment_insights': {},
                'quick_responses': {}
            }
            
            for attachment_type, results in all_results.items():
                successful_results = [r for r in results if r.get('analysis')]
                
                if successful_results:
                    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                    insights = []
                    quick_responses = []
                    
                    for result in successful_results:
                        analysis = result.get('analysis', '')
                        
                        if attachment_type == 'photo':
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ OCR
                            if '—á–µ–∫' in analysis.lower():
                                insights.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ–∫ - –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Ö–æ–¥–æ–≤")
                                quick_responses.append("–í–∏–∂—É —á–µ–∫! –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç—Ä–∞—Ç –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–∫—É–ø–æ–∫.")
                            elif '–æ—à–∏–±–∫–∞' in analysis.lower():
                                insights.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ - –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π")
                                quick_responses.append("–í–∏–∂—É –æ—à–∏–±–∫—É –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ. –ú–æ–≥—É –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π!")
                            elif any(word in analysis.lower() for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ä—É–±–ª–µ–π']):
                                insights.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ü–µ–Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                                quick_responses.append("–í–∏–∂—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö. –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤—ã–±–æ—Ä–æ–º –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º?")
                                
                        elif attachment_type == 'audio_message':
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º–∞—Ç–∏–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ
                            if any(word in analysis.lower() for word in ['–º—É–∑—ã–∫–∞', '–∏–≥—Ä–∞—Ç—å', '—Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ']):
                                insights.append("–ì–æ–ª–æ—Å–æ–≤–æ–µ –æ –º—É–∑—ã–∫–µ/–æ–±—É—á–µ–Ω–∏–∏")
                                quick_responses.append("–°–ª—ã—à—É, —á—Ç–æ —Ä–µ—á—å –æ –º—É–∑—ã–∫–µ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –æ–±—É—á–µ–Ω–∏–µ–º –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø–æ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ.")
                            elif any(word in analysis.lower() for word in ['–ø—Ä–æ–±–ª–µ–º–∞', '–ø–æ–º–æ—â—å', '–≤–æ–ø—Ä–æ—Å']):
                                insights.append("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–º–æ—â–∏")
                                quick_responses.append("–ü–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!")
                            else:
                                quick_responses.append("–ü—Ä–æ—Å–ª—É—à–∞–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
                                
                        elif attachment_type == 'video':
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∏–¥–µ–æ
                            if any(word in analysis.lower() for word in ['—É—Ä–æ–∫', '–æ–±—É—á–µ–Ω–∏–µ', '–∏–≥—Ä–∞–µ—Ç']):
                                insights.append("–í–∏–¥–µ–æ —Å –æ–±—É—á–∞—é—â–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
                                quick_responses.append("–û—Ç–ª–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ! –í–∏–∂—É, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ–±—É—á–µ–Ω–∏–µ–º. –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—É?")
                            elif '–º—É–∑—ã–∫–∞' in analysis.lower():
                                insights.append("–ú—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ")
                                quick_responses.append("–ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –º—É–∑—ã–∫–∞! –•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ—Ö–Ω–∏–∫—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è?")
                                
                        elif attachment_type == 'sticker':
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–∏–∫–µ—Ä–∞
                            if any(word in analysis.lower() for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
                                quick_responses.append("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
                            elif any(word in analysis.lower() for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä']):
                                quick_responses.append("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!")
                            elif any(word in analysis.lower() for word in ['–≥—Ä—É—Å—Ç–Ω', '–ø–µ—á–∞–ª']):
                                quick_responses.append("–ü–æ–Ω–∏–º–∞—é –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ß–µ–º –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å?")
                            elif any(word in analysis.lower() for word in ['—Ä–∞–¥–æ—Å—Ç', '—Å—á–∞—Å—Ç–ª–∏–≤']):
                                quick_responses.append("–†–∞–¥, —á—Ç–æ —É –≤–∞—Å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòä")
                    
                    bot_context['attachment_insights'][attachment_type] = insights
                    bot_context['quick_responses'][attachment_type] = quick_responses
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ—Ç–∞
            context_path = os.path.join(self.results_dir, 'bot_context.json')
            with open(context_path, 'w', encoding='utf-8') as f:
                json.dump(bot_context, f, ensure_ascii=False, indent=2)
                
            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {context_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –±–æ—Ç–∞: {e}")
            
    def print_summary(self, summary: Dict):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        print("\n" + "="*60)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê –í–õ–û–ñ–ï–ù–ò–ô")
        print("="*60)
        
        for attachment_type, stats in summary.items():
            if attachment_type == 'video':
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –≤–∏–¥–µ–æ
                if stats['successful'] > 0:
                    status = "‚úÖ"
                elif stats['partial'] > 0:
                    status = "‚ö†Ô∏è"
                else:
                    status = "‚ùå"
                print(f"{status} {attachment_type}: {stats['successful']}/{stats['total']} –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ({stats['success_rate']})")
                if stats['partial'] > 0:
                    print(f"   üìä {stats['partial']} –≤–∏–¥–µ–æ - —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (URL –Ω–µ –Ω–∞–π–¥–µ–Ω)")
            else:
                status = "‚úÖ" if stats['errors'] == 0 else "‚ö†Ô∏è" if stats['successful'] > 0 else "‚ùå"
                print(f"{status} {attachment_type}: {stats['successful']}/{stats['total']} —É—Å–ø–µ—à–Ω–æ ({stats['success_rate']})")
            
        print("="*60)
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {self.results_dir}")
        print("="*60)
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –≤–ª–æ–∂–µ–Ω–∏–π"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –≤–ª–æ–∂–µ–Ω–∏–π")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            self.initialize_vertex_ai()
            
            # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π
            self.analyze_all_attachments()
            
            logger.info("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise

if __name__ == "__main__":
    analyzer = AttachmentAnalyzer()
    analyzer.run() 