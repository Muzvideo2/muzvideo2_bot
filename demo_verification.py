#!/usr/bin/env python
# -*- coding: utf-8 -*-
# =======================================================================================
#               –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–ê–Ø –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –°–ï–†–í–ò–°–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô
# =======================================================================================
#
# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
#
# =======================================================================================

import json
import re
from datetime import datetime
from typing import Dict, List, Any

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    RESET = '\033[0m'

# –ü—Ä–æ—Å—Ç–∞—è mock-–º–æ–¥–µ–ª—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
class MockModel:
    def generate_content(self, prompt):
        class Response:
            def __init__(self, text):
                self.text = text
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        prompt_lower = prompt.lower()
        
        if "–≤—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä" in prompt_lower:
            return Response('{"action": "none"}')
        elif "–Ω–∞–ø–æ–º–Ω–∏—Ç–µ –º–Ω–µ –∑–∞–≤—Ç—Ä–∞ –≤ 10 —É—Ç—Ä–∞ –æ–ø–ª–∞—Ç–∏—Ç—å" in prompt_lower:
            return Response('{"action": "create", "target_conv_id": 12345678, "proposed_datetime": "2024-01-16T10:00:00+03:00", "reminder_context_summary": "–ö–ª–∏–µ–Ω—Ç –ø–æ–ø—Ä–æ—Å–∏–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ–± –æ–ø–ª–∞—Ç–µ –∫—É—Ä—Å–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00"}')
        elif "–º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –¥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞" in prompt_lower:
            return Response('{"action": "create", "target_conv_id": 23456789, "proposed_datetime": "2024-01-22T10:00:00+03:00", "reminder_context_summary": "–ö–ª–∏–µ–Ω—Ç –≤–∑—è–ª –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –∫—É—Ä—Å–æ–º \'–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è\' –¥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞"}')
        elif "—É–∂–µ –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å" in prompt_lower or "—è —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è" in prompt_lower:
            return Response('{"action": "cancel", "target_conv_id": 34567890, "cancellation_reason": "–ö–ª–∏–µ–Ω—Ç —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª"}')
        elif "conv_id:" in prompt and "78671089" in prompt:
            # –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if "8475643" in prompt:
                return Response('{"action": "create", "target_conv_id": 8475643, "proposed_datetime": "2024-01-16T12:00:00+03:00", "reminder_context_summary": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ—Å–∏–ª –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ –æ–Ω –æ–±–µ—â–∞–ª –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ –∫—É—Ä—Å–æ–º \'–ò–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è\'"}')
            elif "–Ω–∞–ø–æ–º–Ω–∏ –º–Ω–µ" in prompt_lower:
                return Response('{"action": "create", "target_conv_id": 78671089, "proposed_datetime": "2024-01-16T15:30:00+03:00", "reminder_context_summary": "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É"}')
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in prompt_lower and "—á–∞—Å" in prompt_lower:
            # –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç
            return Response('{"action": "none"}')
        else:
            return Response('{"action": "none"}')

def load_test_scenarios():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    try:
        with open("scenarios.json", 'r', encoding='utf-8') as f:
            data = json.load(f)
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return data.get('test_scenarios', [])[:10]
    except FileNotFoundError:
        print(f"{Colors.RED}–§–∞–π–ª scenarios.json –Ω–µ –Ω–∞–π–¥–µ–Ω!{Colors.RESET}")
        return []

def simulate_reminder_analysis(dialogue_messages, model):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    dialogue_text = "\n".join([f"{msg['role']}: {msg['message']}" for msg in dialogue_messages])
    
    prompt = f"""
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:
    
    {dialogue_text}
    
    –í–µ—Ä–Ω–∏ JSON —Å action: create/cancel/none
    """
    
    try:
        response = model.generate_content(prompt)
        result = json.loads(response.text)
        return result
    except json.JSONDecodeError:
        return {"action": "none"}

def test_scenario(scenario, model):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π."""
    result = {
        'id': scenario['id'],
        'description': scenario['description'],
        'status': 'FAIL',
        'details': ''
    }
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        reminder_data = simulate_reminder_analysis(scenario['dialogue_flow'], model)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        expected = scenario['expected_result']
        
        if expected.get('action') == 'none':
            if reminder_data.get('action') == 'none':
                result['status'] = 'SUCCESS'
                result['details'] = '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏'
            else:
                result['status'] = 'FAIL'
                result['details'] = f"–û–∂–∏–¥–∞–ª–æ—Å—å 'none', –ø–æ–ª—É—á–µ–Ω–æ '{reminder_data.get('action')}'"
        
        elif expected.get('action') in ['create', 'cancel']:
            if reminder_data.get('action') == expected.get('action'):
                result['status'] = 'SUCCESS'
                result['details'] = f"–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ: {reminder_data.get('action')}"
            else:
                result['status'] = 'FAIL'
                result['details'] = f"–û–∂–∏–¥–∞–ª–æ—Å—å '{expected.get('action')}', –ø–æ–ª—É—á–µ–Ω–æ '{reminder_data.get('action')}'"
        
        result['actual_result'] = reminder_data
        
    except Exception as e:
        result['status'] = 'ERROR'
        result['details'] = f"–û—à–∏–±–∫–∞: {e}"
    
    return result

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏."""
    print(f"{Colors.BLUE}=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –õ–û–ì–ò–ö–ò –°–ï–†–í–ò–°–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ==={Colors.RESET}\n")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenarios = load_test_scenarios()
    if not scenarios:
        print(f"{Colors.RED}–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–∏{Colors.RESET}")
        return
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(scenarios)} —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º mock-–º–æ–¥–µ–ª—å
    model = MockModel()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã
    results = []
    for i, scenario in enumerate(scenarios):
        print(f"–¢–µ—Å—Ç {i+1}/{len(scenarios)}: {scenario['id']}...", end='')
        result = test_scenario(scenario, model)
        results.append(result)
        
        if result['status'] == 'SUCCESS':
            print(f" {Colors.GREEN}‚úì{Colors.RESET}")
        elif result['status'] == 'FAIL':
            print(f" {Colors.RED}‚úó{Colors.RESET}")
        else:
            print(f" {Colors.RED}ERROR{Colors.RESET}")
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    total = len(results)
    success = sum(1 for r in results if r['status'] == 'SUCCESS')
    failed = sum(1 for r in results if r['status'] == 'FAIL')
    errors = sum(1 for r in results if r['status'] == 'ERROR')
    
    print(f"\n{Colors.BLUE}=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ==={Colors.RESET}")
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
    print(f"{Colors.GREEN}‚úì –£—Å–ø–µ—à–Ω–æ: {success}{Colors.RESET}")
    print(f"{Colors.RED}‚úó –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}{Colors.RESET}")
    print(f"{Colors.RED}üî• –û—à–∏–±–∫–∏: {errors}{Colors.RESET}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(success/total*100):.1f}%")
    
    # –î–µ—Ç–∞–ª–∏ –¥–ª—è –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤
    failed_tests = [r for r in results if r['status'] != 'SUCCESS']
    if failed_tests:
        print(f"\n{Colors.YELLOW}=== –î–ï–¢–ê–õ–ò –ü–†–û–í–ê–õ–ò–í–®–ò–•–°–Ø –¢–ï–°–¢–û–í ==={Colors.RESET}")
        for test in failed_tests:
            print(f"\n{Colors.RED}‚ùå {test['id']}: {test['description']}{Colors.RESET}")
            print(f"   –î–µ—Ç–∞–ª–∏: {test['details']}")
            if 'actual_result' in test:
                print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {test['actual_result']}")
    
    print(f"\n{Colors.BLUE}–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!{Colors.RESET}")
    
    if success == total:
        print(f"{Colors.GREEN}üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.{Colors.RESET}")
    else:
        print(f"{Colors.YELLOW}‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–∫–∏.{Colors.RESET}")

if __name__ == "__main__":
    main()