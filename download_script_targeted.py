# --- –û–ø–∏—Å–∞–Ω–∏–µ ---
# –¶–µ–ª–µ–≤–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ
# –ó–∞–≥—Ä—É–∂–∞–µ—Ç —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏
# –†–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º peer_id
# --- –ö–æ–Ω–µ—Ü –æ–ø–∏—Å–∞–Ω–∏—è ---

import os
import json
import requests
import time
from datetime import datetime
from dotenv import load_dotenv
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def get_vk_session():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ VK API"""
    try:
        vk_token = os.getenv('VK_TOKEN')
        if not vk_token:
            print("‚ùå –û—à–∏–±–∫–∞: VK_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
            return None
            
        vk_session = vk_api.VkApi(token=vk_token)
        vk = vk_session.get_api()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        group_info = vk.groups.getById()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VK API —É—Å–ø–µ—à–Ω–æ. –ì—Ä—É–ø–ø–∞: {group_info[0]['name']}")
        
        return vk_session, vk
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VK API: {e}")
        return None, None

def get_target_attachments():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏"""
    target_types = {
        'photo': 3,
        'video': 3, 
        'sticker': 3,
        'wall': 3,  # —Ä–µ–ø–æ—Å—Ç—ã
        'audio': 3,
        'audio_message': 3  # –≥–æ–ª–æ—Å–æ–≤—ã–µ
    }
    print(f"üéØ –ò—â–µ–º –≤ –≤–∞—à–µ–º –¥–∏–∞–ª–æ–≥–µ (–°–ù–ê–ß–ê–õ–ê –ù–û–í–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è): {target_types}")
    return target_types

def search_in_dialog(vk, peer_id, target_types, max_messages=200):
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–ª–æ–∂–µ–Ω–∏–π –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ"""
    print(f"\nüîç –ü–æ–∏—Å–∫ –≤ –¥–∏–∞–ª–æ–≥–µ peer_id={peer_id}")
    print(f"–ò—â–µ–º: {target_types}")
    
    found_attachments = {att_type: [] for att_type in target_types.keys()}
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –° –ö–û–ù–¶–ê (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ)
        response = vk.messages.getHistory(
            peer_id=peer_id,
            count=max_messages,
            extended=1,
            rev=0  # 0 = —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, 1 = —Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ
        )
        
        messages = response['items']
        print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        for message in messages:
            if not message.get('attachments'):
                continue
                
            for attachment in message['attachments']:
                att_type = attachment['type']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –Ω–∞–º —ç—Ç–æ—Ç —Ç–∏–ø
                if att_type not in target_types:
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –ª–∏–º–∏—Ç–∞
                if len(found_attachments[att_type]) >= target_types[att_type]:
                    continue
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ
                attachment_info = {
                    'message_id': message['id'],
                    'date': message['date'],
                    'attachment': attachment
                }
                
                found_attachments[att_type].append(attachment_info)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {att_type}: {len(found_attachments[att_type])}/{target_types[att_type]}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –¥–∏–∞–ª–æ–≥–µ: {e}")
        
    return found_attachments

def download_attachment(attachment_info, attachment_type, index, output_dir):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è"""
    try:
        attachment = attachment_info['attachment']
        
        if attachment_type == 'photo':
            # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            sizes = attachment['photo']['sizes']
            max_size = max(sizes, key=lambda x: x['width'] * x['height'])
            url = max_size['url']
            filename = f"photo_{index+1}.jpg"
            
        elif attachment_type == 'video':
            # –î–ª—è –≤–∏–¥–µ–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ API
            video_id = attachment['video']['id']
            owner_id = attachment['video']['owner_id']
            # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            filename = f"video_{index+1}.json"
            with open(os.path.join(output_dir, filename), 'w', encoding='utf-8') as f:
                json.dump(attachment['video'], f, ensure_ascii=False, indent=2)
            return True
            
        elif attachment_type == 'audio':
            # –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            filename = f"audio_{index+1}.json"
            with open(os.path.join(output_dir, filename), 'w', encoding='utf-8') as f:
                json.dump(attachment['audio'], f, ensure_ascii=False, indent=2)
            return True
            
        elif attachment_type == 'audio_message':
            # –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            url = attachment['audio_message']['link_mp3']
            filename = f"voice_{index+1}.mp3"
            
        elif attachment_type == 'sticker':
            # –°—Ç–∏–∫–µ—Ä—ã
            images = attachment['sticker']['images']
            max_image = max(images, key=lambda x: x['width'] * x['height'])
            url = max_image['url']
            filename = f"sticker_{index+1}.png"
            
        elif attachment_type == 'wall':
            # –†–µ–ø–æ—Å—Ç—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            filename = f"wall_{index+1}.json"
            with open(os.path.join(output_dir, filename), 'w', encoding='utf-8') as f:
                json.dump(attachment['wall'], f, ensure_ascii=False, indent=2)
            return True
            
        else:
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏—è: {attachment_type}")
            return False
            
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL
        if 'url' in locals():
            response = requests.get(url, timeout=30)
            response.raise_for_status()
            
            filepath = os.path.join(output_dir, filename)
            with open(filepath, 'wb') as f:
                f.write(response.content)
                
            print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {filename}")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {attachment_type}: {e}")
        return False



def main():
    print("üéØ –ü–û–ò–°–ö –í–°–ï–• –í–õ–û–ñ–ï–ù–ò–ô –í –í–ê–®–ï–ú –î–ò–ê–õ–û–ì–ï")
    print("=" * 60)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏
    target_types = get_target_attachments()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à ID –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ª–∏—á–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ
    peer_id = 78671089  # –í–∞—à ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    print(f"\nüéØ –ü–æ–∏—Å–∫ –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ (peer_id={peer_id})")
        
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VK
    vk_session, vk = get_vk_session()
    if not vk:
        return
        
    # –ò—â–µ–º –≤ –¥–∏–∞–ª–æ–≥–µ
    found = search_in_dialog(vk, peer_id, target_types, max_messages=200)
    
    if not found:
        print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ")
        return
        
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    os.makedirs('downloaded_attachments', exist_ok=True)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è
    print("\nüì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π...")
    for att_type, items in found.items():
        if items:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞–π–¥–µ–Ω–æ
            print(f"\nüìÅ –°–∫–∞—á–∏–≤–∞–µ–º {att_type}:")
            
            for i, item in enumerate(items):
                download_attachment(item, att_type, i, 'downloaded_attachments')
                time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
            
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report_data = {
        'search_date': datetime.now().isoformat(),
        'search_type': 'targeted_dialog_search',
        'peer_id': peer_id,
        'found_attachments': {}
    }
    
    for att_type, items in found.items():
        report_data['found_attachments'][att_type] = []
        for item in items:
            report_data['found_attachments'][att_type].append({
                'message_id': item['message_id'],
                'date': item['date']
            })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open('downloaded_attachments/download_report.json', 'w', encoding='utf-8') as f:
        json.dump(report_data, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù!")
    print(f"–ù–∞–π–¥–µ–Ω–æ –∏ —Å–∫–∞—á–∞–Ω–æ:")
    for att_type, items in found.items():
        if items:
            print(f"‚Ä¢ {att_type}: {len(items)}/{target_types[att_type]}")
        else:
            print(f"‚Ä¢ {att_type}: 0/{target_types[att_type]} ‚ùå")
            
    print(f"\nüìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É: downloaded_attachments/")
    print(f"üìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: downloaded_attachments/download_report.json")

if __name__ == "__main__":
    main() 