# -*- coding: utf-8 -*-
"""–ö–æ–¥ –±–æ—Ç–∞-–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ muzvideo2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nfapwF-aNiQrpn3GGGcvkShvU_Ce0-3e
"""

import os
import time
import json
import requests
from datetime import datetime, timedelta
import threading
import vk_api
from flask import Flask, request, jsonify

# ==============================
# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
# ==============================
TELEGRAM_TOKEN     = os.environ.get("TELEGRAM_TOKEN", "")
ADMIN_CHAT_ID      = os.environ.get("ADMIN_CHAT_ID", "")
GEMINI_API_KEY     = os.environ.get("GEMINI_API_KEY", "")
VK_COMMUNITY_TOKEN = os.environ.get("VK_COMMUNITY_TOKEN", "")
YANDEX_DISK_TOKEN  = os.environ.get("YANDEX_DISK_TOKEN", "")
VK_CONFIRMATION_TOKEN = "35ca0bf5"
# ==============================
# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
# ==============================
knowledge_base_path = "knowledge_base.json"
prompt_path         = "prompt.txt"
logs_directory      = "dialog_logs"

# ==============================
# –ü—Ä–æ—á–∏—Ç–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –ø—Ä–æ–º–ø—Ç
# ==============================
if not os.path.exists(logs_directory):
    os.makedirs(logs_directory, exist_ok=True)

with open(knowledge_base_path, "r", encoding="utf-8") as f:
    knowledge_base = json.load(f)

with open(prompt_path, "r", encoding="utf-8") as f:
    custom_prompt = f.read().strip()

# ==============================
# –°–µ—Ä–≤–∏—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ==============================
gemini_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ (–ø–æ user_id)
dialog_history_dict = {}

# –õ–æ–≥-—Ñ–∞–π–ª (–æ–¥–∏–Ω –æ–±—â–∏–π)
log_file_path = os.path.join(logs_directory, f"dialog_{datetime.utcnow().strftime('%Y-%m-%d_%H-%M-%S')}.txt")

# ==============================
# 1. –§–£–ù–ö–¶–ò–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í –¢–ï–õ–ï–ì–†–ê–ú
# ==============================
def send_telegram_notification(user_question, dialog_id):
    current_time = datetime.utcnow() + timedelta(hours=6)  # –í—Ä–µ–º—è –û–º—Å–∫–∞ (+6 –∫ UTC)
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

    message = f"""
üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–û–º—Å–∫): {formatted_time}
üë§ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {user_question}
üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥: https://vk.com/im?sel={dialog_id}
    """.strip()

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    requests.post(url, data=data)

def send_operator_notification(dialog_id, initial_question, dialog_summary, reason_guess):
    current_time = datetime.utcnow() + timedelta(hours=6)
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

    message = f"""
üÜò –ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!
üïí –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (–û–º—Å–∫): {formatted_time}
üë§ –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {initial_question}
üìã –û–±—Å—É–∂–¥–µ–Ω–∏–µ –≤ —Ö–æ–¥–µ –¥–∏–∞–ª–æ–≥–∞: {dialog_summary}
ü§î –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {reason_guess}
üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥: https://vk.com/im?sel={dialog_id}
    """.strip()

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    requests.post(url, data=data)

# ==============================
# 2. –†–ê–ë–û–¢–ê –° –Ø–ù–î–ï–ö–°.–î–ò–°–ö–û–ú: –ó–ê–ì–†–£–ó–ö–ê –õ–û–ì-–§–ê–ô–õ–û–í
# ==============================
def upload_log_to_yandex_disk(log_file_path):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥-—Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –ø—Ä–∏ –ø–æ–º–æ—â–∏ REST API.

    –ê–ª–≥–æ—Ä–∏—Ç–º:
    1) –í—ã–ø–æ–ª–Ω–∏—Ç—å GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ URL:
       https://cloud-api.yandex.net/v1/disk/resources/upload
       —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: path=<–ø—É—Ç—å –≤ –Ø.–î–∏—Å–∫–µ>, overwrite=true
       –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º Authorization: OAuth <YANDEX_DISK_TOKEN>
       –ü–æ–ª—É—á–∏—Ç—å "href" –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.
    2) –í—ã–ø–æ–ª–Ω–∏—Ç—å PUT-–∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π "href",
       –ø–µ—Ä–µ–¥–∞–≤ —Å–∞–º —Ñ–∞–π–ª. –ö–æ–¥ 201 = —É—Å–ø–µ—Ö.

    –ù—É–∂–Ω–æ –∏–º–µ—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è:
      YANDEX_DISK_TOKEN
    """
    if not os.path.exists(log_file_path):
        return

    if not YANDEX_DISK_TOKEN:
        print("YANDEX_DISK_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–æ–≤.")
        return

    file_name = os.path.basename(log_file_path)
    ya_path = f"disk:/app-logs/{file_name}"

    # –®–∞–≥ 1: –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    get_url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params = {
        "path": ya_path,
        "overwrite": "true"
    }
    headers = {
        "Authorization": f"OAuth {YANDEX_DISK_TOKEN}"
    }
    r = requests.get(get_url, headers=headers, params=params)
    if r.status_code != 200:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:", r.text)
        return

    href = r.json().get("href", "")
    if not href:
        print("–ù–µ –Ω–∞—à–ª–∏ 'href' –≤ –æ—Ç–≤–µ—Ç–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞:", r.text)
        return

    # –®–∞–≥ 2: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ
    with open(log_file_path, "rb") as f:
        upload_resp = requests.put(href, files={"file": f})
        if upload_resp.status_code == 201:
            print(f"–õ–æ–≥-—Ñ–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
        else:
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:", upload_resp.text)

# ==============================
# 3. –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ==============================
def log_dialog(user_question, bot_response, relevant_titles, relevant_answers, user_id):
    current_time = datetime.utcnow() + timedelta(hours=6)
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

    with open(log_file_path, "a", encoding="utf-8") as log_file:
        log_file.write(f"[{formatted_time}] user_id={user_id}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_question}\n")
        if relevant_titles and relevant_answers:
            for title, answer in zip(relevant_titles, relevant_answers):
                log_file.write(f"[{formatted_time}] –ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {title} -> {answer}\n")
        log_file.write(f"[{formatted_time}] –ú–æ–¥–µ–ª—å: {bot_response}\n\n")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ (–≤–º–µ—Å—Ç–æ Google Drive)
    upload_log_to_yandex_disk(log_file_path)

# ==============================
# 4. –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GEMINI
# ==============================
def find_relevant_titles_with_gemini(user_question):
    titles = list(knowledge_base.keys())
    prompt_text = f"""
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤-–∫–ª—é—á–µ–π:
{', '.join(titles)}

–ù–∞–π–¥–∏ —Ç—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –∫ –∑–∞–ø—Ä–æ—Å—É: "{user_question}".
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º–∏ –≤–æ–ø—Ä–æ—Å—ã, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """.strip()

    data = {
        "contents": [{"parts": [{"text": prompt_text}]}]
    }
    headers = {"Content-Type": "application/json"}

    for attempt in range(5):
        resp = requests.post(gemini_url, headers=headers, json=data)
        if resp.status_code == 200:
            try:
                result = resp.json()
                text_raw = result['candidates'][0]['content']['parts'][0]['text']
                lines = text_raw.strip().split("\n")
                return [ln.strip() for ln in lines if ln.strip()]
            except KeyError:
                return []
        elif resp.status_code == 500:
            time.sleep(10)
        else:
            return []
    return []

def generate_response(user_question, dialog_history, custom_prompt, relevant_answers=None):
    history_text = "\n".join([
    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {turn.get('user', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n–ú–æ–¥–µ–ª—å: {turn.get('bot', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    for turn in dialog_history
])

    knowledge_hint = f"–ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {relevant_answers}" if relevant_answers else ""

    full_prompt = (
        f"{custom_prompt}\n\n"
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:\n{history_text}\n\n"
        f"{knowledge_hint}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_question}\n–ú–æ–¥–µ–ª—å:"
    )

    data = {
        "contents": [{"parts": [{"text": full_prompt}]}]
    }
    headers = {"Content-Type": "application/json"}

    for attempt in range(5):
        resp = requests.post(gemini_url, headers=headers, json=data)
        if resp.status_code == 200:
            try:
                result = resp.json()
                return result['candidates'][0]['content']['parts'][0]['text']
            except KeyError:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏."
        elif resp.status_code == 500:
            time.sleep(10)
        else:
            return f"–û—à–∏–±–∫–∞: {resp.status_code}. {resp.text}"
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def generate_summary_and_reason(dialog_history):
    history_text = " | ".join([f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {turn['user']} -> –ú–æ–¥–µ–ª—å: {turn['bot']}"
                               for turn in dialog_history[-10:]])
    prompt_text = f"""
–°–≤–æ–¥–∫–∞ –¥–∏–∞–ª–æ–≥–∞: {history_text}

–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞:
1. –°—Ñ–æ—Ä–º–∏—Ä—É–π —Å–≤–æ–¥–∫—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è.
2. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –ø—Ä–∏—á–∏–Ω—É, –ø–æ—á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
    """.strip()
    data = {
        "contents": [{"parts": [{"text": prompt_text}]}]
    }
    headers = {"Content-Type": "application/json"}

    for attempt in range(5):
        resp = requests.post(gemini_url, headers=headers, json=data)
        if resp.status_code == 200:
            try:
                result = resp.json()
                output = result['candidates'][0]['content']['parts'][0]['text'].split("\n", 1)
                dialog_summary = output[0].strip() if len(output) > 0 else "–°–≤–æ–¥–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞"
                reason_guess = output[1].strip() if len(output) > 1 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
                return dialog_summary, reason_guess
            except (KeyError, IndexError):
                return "–°–≤–æ–¥–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        elif resp.status_code == 500:
            time.sleep(10)
        else:
            return "–û—à–∏–±–∫–∞ API", "–û—à–∏–±–∫–∞ API"
    return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º"

# ==============================
# 5. 30-—Å–µ–∫—É–Ω–¥–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏ –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
# ==============================
user_buffers = {}
user_timers  = {}
last_questions = {}

DELAY_SECONDS = 30

# ==============================
# 6. –ü–ê–£–ó–ê –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# ==============================
paused_users = set()

def handle_new_message(user_id, text, vk, is_outgoing=False):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param vk: –æ–±—ä–µ–∫—Ç VK API
    :param is_outgoing: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–µ
    """
    lower_text = text.lower()

    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Ö–æ–¥—è—â–∏–µ –∏ –∏—Å—Ö–æ–¥—è—â–∏–µ)
    dialog_history_dict.setdefault(user_id, []).append({
        "user" if not is_outgoing else "operator": text
    })

    if is_outgoing:
        # –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã "–ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É" –∏–ª–∏ "—Å–Ω—è—Ç—å —Å –ø–∞—É–∑—ã"
        if "—è –ø–æ—Å—Ç–∞–≤–∏–ª –±–æ—Ç–∞ –Ω–∞ –ø–∞—É–∑—É" in lower_text:
            paused_users.add(user_id)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.")
        elif "–±–æ—Ç —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å" in lower_text:
            paused_users.discard(user_id)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–Ω—è—Ç —Å –ø–∞—É–∑—ã. –ë–æ—Ç —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.")
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏—Å—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ø–∞—É–∑–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in paused_users:
        return

    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user_buffers.setdefault(user_id, []).append(text)
    last_questions[user_id] = text

    if user_id in user_timers:
        user_timers[user_id].cancel()

    timer = threading.Timer(DELAY_SECONDS, generate_and_send_response, args=(user_id, vk))
    user_timers[user_id] = timer
    timer.start()


def generate_and_send_response(user_id, vk):
    if user_id in paused_users:
        user_buffers[user_id] = []
        return

    msgs = user_buffers.get(user_id, [])
    if not msgs:
        return
    combined_text = "\n".join(msgs)
    user_buffers[user_id] = []

    dialog_history = dialog_history_dict[user_id]
    relevant_titles = find_relevant_titles_with_gemini(combined_text)
    relevant_answers = [knowledge_base[t] for t in relevant_titles if t in knowledge_base]

    model_response = generate_response(combined_text, dialog_history, custom_prompt, relevant_answers)

    log_dialog(combined_text, model_response, relevant_titles, relevant_answers, user_id)

    if "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in combined_text.lower():
        summary, reason = generate_summary_and_reason(dialog_history)
        initial_q = last_questions.get(user_id, "")
        send_operator_notification(user_id, initial_q, summary, reason)

    dialog_history.append({"user": combined_text, "bot": model_response})

    vk.messages.send(
        user_id=user_id,
        message=model_response,
        random_id=int(time.time() * 1000)
    )

# ==============================
# 7. –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ
# ==============================
def main():
    vk_session = vk_api.VkApi(token=VK_COMMUNITY_TOKEN)
    vk = vk_session.get_api()

# –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Callback API
app = Flask(__name__)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))  # Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç PORT
    app.run(host="0.0.0.0", port=port)

@app.route("/callback", methods=["POST"])
def callback():
    data = request.json

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    if data.get("type") == "confirmation":
        return VK_CONFIRMATION_TOKEN

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    if VK_SECRET_KEY and data.get("secret") != VK_SECRET_KEY:
        return "Invalid secret", 403

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if data.get("type") == "message_new":
        user_id = data["object"]["message"]["from_id"]
        text = data["object"]["message"]["text"]
        process_message(user_id, text)

    return "ok"

def process_message(user_id, text):
    """
    –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    send_message(user_id, f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}")

def send_message(user_id, message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
    """
    url = "https://api.vk.com/method/messages.send"
    params = {
        "access_token": VK_ACCESS_TOKEN,
        "user_id": user_id,
        "message": message,
        "random_id": 0,
        "v": "5.131"
    }
    requests.post(url, params=params)