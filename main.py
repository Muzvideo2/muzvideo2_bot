import os
import re
import time
import json
import requests
import psycopg2
import psycopg2.extras
import subprocess
from datetime import datetime, timedelta, timezone
import threading
import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
from flask import Flask, request, jsonify
from urllib.parse import quote
import openpyxl
import logging
from apscheduler.schedulers.background import BackgroundScheduler
from google.cloud import aiplatform
import vertexai
from vertexai.generative_models import GenerativeModel
from google.oauth2 import service_account

# ====
# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
# ====
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN", "")
ADMIN_CHAT_ID = os.environ.get("ADMIN_CHAT_ID", "")
VK_COMMUNITY_TOKEN = os.environ.get("VK_COMMUNITY_TOKEN", "")
YANDEX_DISK_TOKEN = os.environ.get("YANDEX_DISK_TOKEN", "")
VK_SECRET_KEY = os.environ.get("VK_SECRET_KEY", "")
VK_CONFIRMATION_TOKEN = os.environ.get("VK_CONFIRMATION_TOKEN", "")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã PostgreSQL
DATABASE_URL = os.environ.get("DATABASE_URL")

# ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
VK_COMMUNITY_ID = 48116621

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Vertex AI
PROJECT_ID = "zeta-tracer-462306-r7"
LOCATION = "us-central1"
MODEL_NAME = "gemini-2.5-flash"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:
operator_timers = {}
client_timers = {}
dialog_history_dict = {}
user_names = {}
user_log_files = {}
user_buffers = {}
last_questions = {}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
USER_MESSAGE_BUFFERING_DELAY = 60

# ====
# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
# ====
KNOWLEDGE_BASE_PATH = "knowledge_base.json"
PROMPT_PATH = "prompt.txt"
LOGS_DIRECTORY = "dialog_logs"

CONTEXT_BUILDER_PATH = "context_builder.py"
SUMMARY_UPDATER_PATH = "summary_updater.py"

# ====
# –ü—Ä–æ—á–∏—Ç–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –ø—Ä–æ–º–ø—Ç
# ====
if not os.path.exists(LOGS_DIRECTORY):
    os.makedirs(LOGS_DIRECTORY, exist_ok=True)

try:
    with open(KNOWLEDGE_BASE_PATH, "r", encoding="utf-8") as f:
        knowledge_base = json.load(f)
except FileNotFoundError:
    logging.error(f"–§–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π '{KNOWLEDGE_BASE_PATH}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞ –±–µ–∑ –Ω–µ–µ.")
    knowledge_base = {}
except json.JSONDecodeError:
    logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π '{KNOWLEDGE_BASE_PATH}'.")
    knowledge_base = {}

try:
    with open(PROMPT_PATH, "r", encoding="utf-8") as f:
        custom_prompt = f.read().strip()
except FileNotFoundError:
    logging.error(f"–§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ '{PROMPT_PATH}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç.")
    custom_prompt = "–¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."

# ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞)
try:
    OPERATOR_VK_ID = int(os.environ.get("OPERATOR_VK_ID", 0))
except ValueError:
    logging.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPERATOR_VK_ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ 0.")
    OPERATOR_VK_ID = 0

# ====
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î
# ====
def get_main_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è DATABASE_URL."""
    if not DATABASE_URL:
        logging.error("DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        raise ValueError("DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    try:
        conn = psycopg2.connect(DATABASE_URL)
        logging.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        return conn
    except psycopg2.Error as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

# ====
# 1. –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–†–û–°–ê –ò–ú–ï–ù–ò –ö–õ–ò–ï–ù–¢–ê –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–•
# ====
def get_user_name_from_db(user_id_to_fetch):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã user_profiles –≤ –ë–î.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ user_names –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î.
    """
    try:
        user_id_int = int(user_id_to_fetch)
    except ValueError:
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id '{user_id_to_fetch}' –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏ –∏–∑ –ë–î.")
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "VK"

    if user_id_int in user_names:
        logging.debug(f"–ò–º—è –¥–ª—è user_id {user_id_int} –≤–∑—è—Ç–æ –∏–∑ –∫–µ—à–∞: {user_names[user_id_int]}")
        return user_names[user_id_int]

    conn = None
    try:
        conn = get_main_db_connection()
        with conn.cursor() as cur:
            cur.execute(
                "SELECT first_name, last_name FROM user_profiles WHERE conv_id = %s",
                (user_id_int,)
            )
            result = cur.fetchone()

            if result:
                first_name, last_name = result
                user_names[user_id_int] = (first_name, last_name)
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è –¥–ª—è user_id {user_id_int} –∏–∑ –ë–î: {first_name} {last_name}")
                return first_name, last_name
            else:
                logging.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –¥–ª—è user_id {user_id_int} –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è.")
                user_names[user_id_int] = (f"User_{user_id_int}", "")
                return f"User_{user_id_int}", ""

    except psycopg2.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –¥–ª—è user_id {user_id_int}: {e}")
        return f"User_{user_id_int}", "(–æ—à–∏–±–∫–∞ –ë–î)"
    finally:
        if conn:
            conn.close()

# ====
# 2. –§–£–ù–ö–¶–ò–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í –¢–ï–õ–ï–ì–†–ê–ú
# ====
def send_telegram_notification(user_question_text, dialog_id, first_name="", last_name=""):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ "–æ–ø–µ—Ä–∞—Ç–æ—Ä".
    """
    if not TELEGRAM_TOKEN or not ADMIN_CHAT_ID:
        logging.warning("–¢–æ–∫–µ–Ω Telegram –∏–ª–∏ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    vk_dialog_link = f"https://vk.com/gim{VK_COMMUNITY_ID}?sel={dialog_id}"
    user_full_name = f"{first_name} {last_name}".strip()
    if not user_full_name:
        user_full_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {dialog_id}"

    message_text = f"""
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_full_name}
üí¨ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {user_question_text}
üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥: {vk_dialog_link}
    """.strip()

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message_text,
        "parse_mode": "Markdown",
        "disable_web_page_preview": True
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        response.raise_for_status()
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–∏–∞–ª–æ–≥–µ ({dialog_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {dialog_id}: {e}")


def send_operator_request_notification(dialog_id, initial_question, dialog_summary, reason_guess, first_name="", last_name=""):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞.
    """
    if not TELEGRAM_TOKEN or not ADMIN_CHAT_ID:
        logging.warning("–¢–æ–∫–µ–Ω Telegram –∏–ª–∏ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        return

    vk_dialog_link = f"https://vk.com/gim{VK_COMMUNITY_ID}?sel={dialog_id}"
    user_full_name = f"{first_name} {last_name}".strip()
    if not user_full_name:
        user_full_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {dialog_id}"

    message_text = f"""
üÜò –ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_full_name}
‚ùì –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {initial_question}
üìù –°–≤–æ–¥–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {dialog_summary}
ü§î –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø—Ä–∏—á–∏–Ω–∞: {reason_guess}
üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥: {vk_dialog_link}
    """.strip()

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message_text,
        "parse_mode": "Markdown",
        "disable_web_page_preview": True
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        response.raise_for_status()
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ({dialog_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ({dialog_id}) –≤ Telegram: {e}")

# ====
# 3. –†–ê–ë–û–¢–ê –° –Ø–ù–î–ï–ö–°.–î–ò–°–ö–û–ú: –ó–ê–ì–†–£–ó–ö–ê –õ–û–ì-–§–ê–ô–õ–û–í
# ====
def upload_log_to_yandex_disk(log_file_path_to_upload):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª log_file_path_to_upload –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫, –µ—Å–ª–∏ YANDEX_DISK_TOKEN –∑–∞–¥–∞–Ω.
    """
    if not YANDEX_DISK_TOKEN:
        logging.warning("YANDEX_DISK_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–æ–≤ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
        return

    if not os.path.exists(log_file_path_to_upload):
        logging.warning(f"–§–∞–π–ª '{log_file_path_to_upload}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
        return

    create_dir_url = "https://cloud-api.yandex.net/v1/disk/resources"
    headers_ya = {"Authorization": f"OAuth {YANDEX_DISK_TOKEN}"}
    params_ya_create_dir = {"path": "disk:/app-logs"}

    try:
        response_create_dir = requests.put(create_dir_url, headers=headers_ya, params=params_ya_create_dir, timeout=10)
        if response_create_dir.status_code == 201:
            logging.info("–ü–∞–ø–∫–∞ 'app-logs' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ.")
        elif response_create_dir.status_code == 409:
            logging.info("–ü–∞–ø–∫–∞ 'app-logs' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ.")
        else:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–ø–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ. –°—Ç–∞—Ç—É—Å: {response_create_dir.status_code}, –û—Ç–≤–µ—Ç: {response_create_dir.text}")
    except requests.Timeout:
        logging.error("–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞–ø–∫–∏ /app-logs –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ.")
        return
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ: {e}")
        return

    file_name_to_upload = os.path.basename(log_file_path_to_upload)
    ya_disk_path = f"disk:/app-logs/{file_name_to_upload}"

    get_upload_url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params_get_url = {"path": ya_disk_path, "overwrite": "true"}

    try:
        response_get_link = requests.get(get_upload_url, headers=headers_ya, params=params_get_url, timeout=10)
        response_get_link.raise_for_status()

        href_upload_link = response_get_link.json().get("href")
        if not href_upload_link:
            logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω 'href' –≤ –æ—Ç–≤–µ—Ç–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ '{file_name_to_upload}': {response_get_link.text}")
            return

        with open(log_file_path_to_upload, "rb") as f_log:
            upload_response = requests.put(href_upload_link, files={"file": f_log}, timeout=30)

        if upload_response.status_code == 201:
            logging.info(f"–õ–æ–≥-—Ñ–∞–π–ª '{file_name_to_upload}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ {upload_response.status_code} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ '{file_name_to_upload}' –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {upload_response.text}")

    except requests.Timeout:
        logging.error(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º –¥–ª—è —Ñ–∞–π–ª–∞ '{file_name_to_upload}'.")
    except requests.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–æ–º –¥–ª—è —Ñ–∞–π–ª–∞ '{file_name_to_upload}': {e}")
    except KeyError:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è 'href' –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ '{file_name_to_upload}'.")
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ '{file_name_to_upload}' –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {e}")

# ====
# 4. –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–ò–°–ò –î–ê–ù–ù–´–• CALLBACK –û–¢ VK –í JSON-—Ñ–∞–π–ª
# ====
CALLBACK_LOGS_DIR = "callback_logs"
if not os.path.exists(CALLBACK_LOGS_DIR):
    os.makedirs(CALLBACK_LOGS_DIR, exist_ok=True)

def save_callback_payload(data_payload):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å—å JSON, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
    """
    timestamp_str = datetime.utcnow().strftime("%Y-%m-%d_%H-%M-%S_%f")
    file_name = f"callback_{timestamp_str}.json"
    file_path = os.path.join(CALLBACK_LOGS_DIR, file_name)

    try:
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(data_payload, f, ensure_ascii=False, indent=2)
        logging.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω callback JSON: {file_name}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ callback payload –≤ —Ñ–∞–π–ª '{file_path}': {e}")


# ====
# 5. –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ò–ê–õ–û–ì–û–í –í POSTGRES
# ====
def store_dialog_in_db(conv_id, role, message_text_with_timestamp, client_info=""):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    if not DATABASE_URL:
        logging.error("DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î.")
        return

    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute(
            """INSERT INTO dialogues (conv_id, role, message, client_info)
            VALUES (%s, %s, %s, %s)""",
            (conv_id, role, message_text_with_timestamp, client_info)
        )
        conn.commit()
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è conv_id {conv_id} (—Ä–æ–ª—å: {role}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î.")
    except psycopg2.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ PostgreSQL –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è conv_id {conv_id}: {e}")
        if conn:
            conn.rollback()
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –≤ –ë–î –¥–ª—è conv_id {conv_id}: {e}")
        if conn:
            conn.rollback()
    finally:
        if 'cur' in locals() and cur:
            cur.close()
        if 'conn' in locals() and conn:
            conn.close()


# ====
# 6. –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –í–ù–ï–®–ù–ò–ú–ò –°–ï–†–í–ò–°–ê–ú–ò
# ====
def call_context_builder(vk_callback_data):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å context_builder.py –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        process = subprocess.run(
            ["python", CONTEXT_BUILDER_PATH],
            input=json.dumps(vk_callback_data, ensure_ascii=False),
            capture_output=True,
            text=True,
            encoding='utf-8',
            timeout=30
        )

        if process.returncode != 0:
            error_msg = f"Context Builder –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ {process.returncode}. stderr: {process.stderr}"
            logging.error(error_msg)
            raise Exception(error_msg)

        context_text = process.stdout.strip()
        if not context_text:
            logging.warning("Context Builder –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return ""

        logging.info(f"Context Builder —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥–ª–∏–Ω–∞: {len(context_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return context_text

    except subprocess.TimeoutExpired:
        error_msg = "Context Builder –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (30 —Å–µ–∫—É–Ω–¥)"
        logging.error(error_msg)
        raise Exception(error_msg)
    except FileNotFoundError:
        error_msg = f"–§–∞–π–ª {CONTEXT_BUILDER_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        logging.error(error_msg)
        raise Exception(error_msg)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Context Builder: {e}"
        logging.error(error_msg)
        raise Exception(error_msg)


def call_summary_updater_async(conv_id):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å summary_updater.py –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞.
    """
    def run_summary_updater():
        try:
            process = subprocess.run(
                ["python", SUMMARY_UPDATER_PATH],
                input=str(conv_id),
                capture_output=True,
                text=True,
                encoding='utf-8',
                timeout=60
            )

            if process.returncode != 0:
                logging.error(f"Summary Updater –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏ {process.returncode} –¥–ª—è conv_id {conv_id}. stderr: {process.stderr}")
            else:
                logging.info(f"Summary Updater —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª conv_id {conv_id}")

        except subprocess.TimeoutExpired:
            logging.error(f"Summary Updater –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è conv_id {conv_id}")
        except FileNotFoundError:
            logging.error(f"–§–∞–π–ª {SUMMARY_UPDATER_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –≤—ã–∑–æ–≤–µ Summary Updater –¥–ª—è conv_id {conv_id}: {e}")

    threading.Thread(target=run_summary_updater, daemon=True).start()
    logging.info(f"Summary Updater –∑–∞–ø—É—â–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è conv_id {conv_id}")


# ====
# Flask App –∏ –µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
# ====
app = Flask(__name__)

@app.route('/ping_main_bot', methods=['GET'])
def ping_main_bot():
    return "Pong from Main Bot!", 200

@app.route("/clear_context/<int:user_conv_id>", methods=["POST"])
def clear_context(user_conv_id):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞) –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞.
    """
    logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—á–∏—Å—Ç–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è conv_id: {user_conv_id}")

    if not DATABASE_URL:
        logging.error("DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–∏—â–µ–Ω –∏–∑ –ë–î.")
        return jsonify({"status": "error", "message": "DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"}), 500

    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute("DELETE FROM dialogues WHERE conv_id = %s", (user_conv_id,))
        deleted_rows = cur.rowcount
        conn.commit()
        cur.close()
        conn.close()
        logging.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_rows} –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î –¥–ª—è conv_id {user_conv_id}.")

        if user_conv_id in dialog_history_dict:
            del dialog_history_dict[user_conv_id]
        if user_conv_id in user_buffers:
            del user_buffers[user_conv_id]
        if user_conv_id in client_timers:
            client_timers[user_conv_id].cancel()
            del client_timers[user_conv_id]
        if user_conv_id in operator_timers:
            operator_timers[user_conv_id].cancel()
            del operator_timers[user_conv_id]
        if user_conv_id in last_questions:
            del last_questions[user_conv_id]

        logging.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–µ—à –¥–ª—è conv_id {user_conv_id} –æ—á–∏—â–µ–Ω.")
        return jsonify({"status": "success", "message": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è conv_id {user_conv_id} —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î: {deleted_rows}."}), 200

    except psycopg2.Error as db_err:
        logging.error(f"–û—à–∏–±–∫–∞ PostgreSQL –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è conv_id {user_conv_id}: {db_err}")
        return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"}), 500
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è conv_id {user_conv_id}: {e}")
        return jsonify({"status": "error", "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"}), 500


@app.route("/operator_message_sent", methods=["POST"])
def operator_message_sent():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    data = request.json
    conv_id_from_request = data.get("conv_id")

    if conv_id_from_request is None:
        logging.warning("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å /operator_message_sent –±–µ–∑ conv_id –≤ —Ç–µ–ª–µ JSON.")
        return jsonify({"status": "error", "message": "conv_id is required in JSON body"}), 400

    try:
        conv_id = int(conv_id_from_request)
    except ValueError:
        logging.warning(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π conv_id –≤ /operator_message_sent: '{conv_id_from_request}'. –ù–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
        return jsonify({"status": "error", "message": "Invalid conv_id format, must be an integer"}), 400

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –æ–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥ {conv_id}")

    if conv_id in client_timers:
        client_timers[conv_id].cancel()
        logging.info(f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {conv_id} –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

    if conv_id in user_buffers:
        user_buffers[conv_id] = []
        logging.info(f"–ë—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {conv_id} –æ—á–∏—â–µ–Ω –∏–∑-–∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

    if conv_id in operator_timers:
        operator_timers[conv_id].cancel()

    op_timer = threading.Timer(15 * 60, clear_operator_timer, args=(conv_id,))
    operator_timers[conv_id] = op_timer
    op_timer.start()
    logging.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –Ω–∞ 15 –º–∏–Ω—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {conv_id}.")

    return jsonify({"status": "success", "message": f"Operator activity processed for conv_id {conv_id}"}), 200


def clear_operator_timer(conv_id_for_timer):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
    """
    if conv_id_for_timer in operator_timers:
        del operator_timers[conv_id_for_timer]
        logging.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {conv_id_for_timer} –∏—Å—Ç—ë–∫ –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –Ω–µ–¥–∞–≤–Ω–∏—Ö event_id
recent_event_ids = {}
EVENT_ID_TTL = 30

# ====
# 7. –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GEMINI (VERTEX AI)
# ====
def find_relevant_titles_with_gemini(user_question_text, model):
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Gemini —á–µ—Ä–µ–∑ Vertex AI SDK –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
    """
    if not knowledge_base:
        logging.info("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞. –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è.")
        return []

    titles = list(knowledge_base.keys())
    prompt_text = f"""
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –Ω–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤-–∫–ª—é—á–µ–π (–∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç):
--- –ù–ê–ß–ê–õ–û –°–ü–ò–°–ö–ê –í–û–ü–†–û–°–û–í ---
{', '.join(titles)}
--- –ö–û–ù–ï–¶ –°–ü–ò–°–ö–ê –í–û–ü–†–û–°–û–í ---

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
"{user_question_text}"

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –≤—ã–±—Ä–∞—Ç—å –∏–∑ –°–ü–ò–°–ö–ê –í–û–ü–†–û–°–û–í –Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö (3) –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤-–∫–ª—é—á–µ–π –∫ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É.
–ö—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ:
1.  –¢—ã –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¢–û–õ–¨–ö–û –≤–æ–ø—Ä–æ—Å—ã-–∫–ª—é—á–∏ –ò–ó –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–ù–û–ì–û –°–ü–ò–°–ö–ê.
2.  –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–µ –∏–∑–º–µ–Ω—è–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.
3.  –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.
4.  –ï—Å–ª–∏ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –≤–µ—Ä–Ω–∏ –∏—Ö –°–¢–†–û–ì–û –ø–æ –æ–¥–Ω–æ–º—É –≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤.

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –¥–≤–∞ –≤–æ–ø—Ä–æ—Å–∞:
–í–æ–ø—Ä–æ—Å-–∫–ª—é—á –∏–∑ —Å–ø–∏—Å–∫–∞ 1
–í–æ–ø—Ä–æ—Å-–∫–ª—é—á –∏–∑ —Å–ø–∏—Å–∫–∞ 2

–û—Ç–≤–µ—Ç:
    """.strip()

    for attempt in range(3):
        try:
            response = model.generate_content(prompt_text, request_options={'timeout': 20})
            
            text_raw = response.text
            lines = text_raw.strip().split("\n")
            relevant_titles_found = [ln.strip() for ln in lines if ln.strip() and ln.strip() in knowledge_base]
            logging.info(f"Gemini (Vertex AI) –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {relevant_titles_found} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞: '{user_question_text}'")
            return relevant_titles_found[:3]

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ Vertex AI –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < 2:
                time.sleep(5)
            else:
                logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç Gemini (Vertex AI) –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
                return []
    return []


def generate_response(user_question_text, context_from_builder, current_custom_prompt, user_first_name, model, relevant_kb_titles=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ Gemini —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—Ç Context Builder –∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
    """
    knowledge_hint_text = ""
    if relevant_kb_titles and knowledge_base:
        kb_lines = []
        for key_title in relevant_kb_titles:
            if key_title in knowledge_base:
                value = str(knowledge_base[key_title]).strip()
                kb_lines.append(f"- {key_title}: {value}")
        if kb_lines:
            knowledge_hint_text = "–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n" + "\n".join(kb_lines)

    prompt_parts = [current_custom_prompt]
    if context_from_builder.strip():
        prompt_parts.append(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{context_from_builder.strip()}")
    if knowledge_hint_text:
        prompt_parts.append(knowledge_hint_text)

    prompt_parts.append(f"–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –æ—Ç {user_first_name if user_first_name else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}: {user_question_text}")
    prompt_parts.append("–¢–≤–æ–π –æ—Ç–≤–µ—Ç (–ú–æ–¥–µ–ª—å):")

    full_prompt_text = "\n\n".join(prompt_parts)

    prompt_log_filename = f"prompt_gemini_{datetime.utcnow().strftime('%Y-%m-%d_%H-%M-%S_%f')}.txt"
    prompt_log_filepath = os.path.join(LOGS_DIRECTORY, prompt_log_filename)
    try:
        with open(prompt_log_filepath, "w", encoding="utf-8") as pf:
            pf.write(full_prompt_text)
        logging.info(f"–ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {prompt_log_filepath}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–º–ø—Ç–∞ Gemini –≤ —Ñ–∞–π–ª '{prompt_log_filepath}': {e}")

    for attempt in range(3):
        try:
            response = model.generate_content(full_prompt_text, request_options={'timeout': 30})
            model_response_text = response.text.strip()
            logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç Gemini (Vertex AI) –ø–æ–ª—É—á–µ–Ω: '{model_response_text[:200]}...'")
            return model_response_text
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ Vertex AI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < 2:
                time.sleep(5)
            else:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. (–û—à–∏–±–∫–∞ Vertex AI)"
    
    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Gemini (Vertex AI) –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä', –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å—Ä–æ—á–Ω—ã–π."


def generate_summary_and_reason(dialog_history_list_for_summary, model):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –¥–∏–∞–ª–æ–≥–∞ –∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é –ø—Ä–∏—á–∏–Ω—É –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é Gemini (Vertex AI).
    """
    history_text_parts = []
    for turn in dialog_history_list_for_summary[-10:]:
        role = list(turn.keys())[0]
        message_content = turn[role]
        sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if role == 'user': sender_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        elif role == 'bot': sender_name = "–ú–æ–¥–µ–ª—å"
        elif role == 'operator': sender_name = "–û–ø–µ—Ä–∞—Ç–æ—Ä"

        history_text_parts.append(f"{sender_name}: {message_content.strip()}")

    history_text_for_prompt = "\n".join(history_text_parts)

    prompt_text = f"""
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ú–æ–¥–µ–ª—å—é –∏ –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:
--- –ù–ê–ß–ê–õ–û –î–ò–ê–õ–û–ì–ê ---
{history_text_for_prompt}
--- –ö–û–ù–ï–¶ –î–ò–ê–õ–û–ì–ê ---

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1.  –°—Ñ–æ—Ä–º–∏—Ä—É–π –û–ß–ï–ù–¨ –ö–†–ê–¢–ö–£–Æ —Å–≤–æ–¥–∫—É —Å—É—Ç–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–Ω–µ –±–æ–ª–µ–µ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π).
2.  –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –ù–ê–ò–ë–û–õ–ï–ï –í–ï–†–û–Ø–¢–ù–£–Æ –ø—Ä–∏—á–∏–Ω—É, –ø–æ—á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ).

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏:
–°—Ç—Ä–æ–∫–∞ 1: <–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è>
–°—Ç—Ä–æ–∫–∞ 2: <–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞>

–ü—Ä–∏–º–µ—Ä:
–°—Ç—Ä–æ–∫–∞ 1: –û–±—Å—É–∂–¥–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—É —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫—É—Ä—Å—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.
–°—Ç—Ä–æ–∫–∞ 2: –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —Ä–µ—à–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–û—Ç–≤–µ—Ç:
    """.strip()

    for attempt in range(2):
        try:
            response = model.generate_content(prompt_text, request_options={'timeout': 15})
            output_text = response.text.strip()
            parts = output_text.split("\n", 1)
            dialog_summary_text = parts[0].strip() if len(parts) > 0 else "–°–≤–æ–¥–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞"
            reason_guess_text = parts[1].strip() if len(parts) > 1 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
            logging.info(f"–°–≤–æ–¥–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (Vertex AI): '{dialog_summary_text}', –ü—Ä–∏—á–∏–Ω–∞: '{reason_guess_text}'")
            return dialog_summary_text, reason_guess_text
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ Vertex AI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < 1:
                time.sleep(3)
    
    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –∏ –ø—Ä–∏—á–∏–Ω—É –æ—Ç Gemini (Vertex AI).")
    return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É (–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞)", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É (–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞)"

# ====
# 8. –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–û–°–¢–ò –û–ü–ï–†–ê–¢–û–†–ê
# ====
def check_operator_activity_and_cleanup(conv_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–∞–≤–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ conv_id.
    """
    logging.info(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è conv_id: {conv_id}")
    conn = None
    cur = None
    try:
        conn = get_main_db_connection()
        cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor) 

        cur.execute("SELECT last_operator_activity_at FROM operator_activity WHERE conv_id = %s", (conv_id,))
        record = cur.fetchone()

        if record:
            last_active_time = record['last_operator_activity_at']
            if last_active_time.tzinfo is None:
                last_active_time = last_active_time.replace(tzinfo=timezone.utc)
                logging.warning(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –í—Ä–µ–º—è last_operator_activity_at –¥–ª—è conv_id {conv_id} –±—ã–ª–æ –±–µ–∑ tzinfo, –ø—Ä–∏–Ω—è—Ç–æ –∫–∞–∫ UTC.")

            current_time = datetime.now(timezone.utc)
            time_since_operator_activity = current_time - last_active_time

            logging.debug(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] conv_id: {conv_id}, –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {last_active_time}, –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}, –†–∞–∑–Ω–∏—Ü–∞: {time_since_operator_activity}")

            if time_since_operator_activity <= timedelta(minutes=15):
                logging.info(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –û–ø–µ—Ä–∞—Ç–æ—Ä –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è conv_id: {conv_id} (–≤ {last_active_time}). –ë–æ—Ç —Å–¥–µ–ª–∞–µ—Ç –ü–ê–£–ó–£.")
                return True
            else:
                logging.info(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è conv_id: {conv_id} —Å—Ç–∞—Ä—à–µ 15 –º–∏–Ω—É—Ç ({last_active_time}). –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å. –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏.")
                try:
                    cur.execute("DELETE FROM operator_activity WHERE conv_id = %s", (conv_id,))
                    conn.commit()
                    logging.info(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è conv_id: {conv_id}.")
                except psycopg2.Error as e_delete:
                    conn.rollback()
                    logging.error(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è conv_id: {conv_id}. –û—à–∏–±–∫–∞: {e_delete}")
                return False
        else:
            logging.info(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –ó–∞–ø–∏—Å—å –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è conv_id: {conv_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.")
            return False

    except psycopg2.Error as e_db:
        logging.error(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è conv_id {conv_id}: {e_db}")
        logging.warning(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –ë–æ—Ç —Å–¥–µ–ª–∞–µ—Ç –ü–ê–£–ó–£ –¥–ª—è conv_id {conv_id} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ë–î –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return True 
    except Exception as e_generic:
        logging.error(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è conv_id {conv_id}: {e_generic}")
        logging.warning(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –ë–æ—Ç —Å–¥–µ–ª–∞–µ—Ç –ü–ê–£–ó–£ –¥–ª—è conv_id {conv_id} –∏–∑-–∑–∞ –æ–±—â–µ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return True
    finally:
        if cur:
            cur.close()
        if conn:
            conn.close()
        logging.debug(f"[–ü—Ä–æ–≤–µ—Ä–∫–∞–û–ø–µ—Ä–∞—Ç–æ—Ä–∞] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (conv_id {conv_id}) –∑–∞–∫—Ä—ã—Ç–æ.")

# ====
# 9. –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–°–¢–£–ü–ò–í–®–ï–ì–û –°–û–û–ë–©–ï–ù–ò–Ø –ò–ó VK CALLBACK
# ====
def handle_new_message(user_id_from_vk, message_text_from_vk, vk_api_object, vk_callback_data, is_outgoing_message=False, conversation_id=None):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ VK Callback API.
    """
    actual_conv_id = conversation_id if conversation_id is not None else user_id_from_vk

    if is_outgoing_message:
        if int(user_id_from_vk) < 0:
            logging.info(f"[VK Callback] –ò—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (user_id: {user_id_from_vk}) –≤ –¥–∏–∞–ª–æ–≥–µ {actual_conv_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        else:
            logging.info(f"[VK Callback] –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id_from_vk} –≤ –¥–∏–∞–ª–æ–≥–µ {actual_conv_id}. –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.")
        return

    first_name, last_name = get_user_name_from_db(actual_conv_id)
    full_name_display = f"{first_name} {last_name}".strip() or f"User_{actual_conv_id}"

    if actual_conv_id not in user_log_files:
        now_for_filename = datetime.utcnow().strftime('%Y-%m-%d_%H-%M-%S')
        safe_display_name = "".join(c for c in full_name_display if c.isalnum() or c in (' ', '_')).replace(' ', '_')
        log_file_name = f"dialog_{now_for_filename}_{actual_conv_id}_{safe_display_name}.txt"
        user_log_files[actual_conv_id] = os.path.join(LOGS_DIRECTORY, log_file_name)

    try:
        log_entry_text = f"[{datetime.utcnow() + timedelta(hours=6):%Y-%m-%d_%H-%M-%S}] {full_name_display} (raw VK): {message_text_from_vk}\n"
        with open(user_log_files[actual_conv_id], "a", encoding="utf-8") as log_f:
            log_f.write(log_entry_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è conv_id {actual_conv_id}: {e}")

    if OPERATOR_VK_ID > 0 and int(user_id_from_vk) == OPERATOR_VK_ID:
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç VK ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ({OPERATOR_VK_ID}) –≤ –¥–∏–∞–ª–æ–≥–µ {actual_conv_id}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        return

    try:
        is_operator_active = check_operator_activity_and_cleanup(actual_conv_id)
    except Exception as e_check:
        logging.error(f"[handle_new_message] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –ë–î –¥–ª—è conv_id {actual_conv_id}: {e_check}")
        is_operator_active = True

    if is_operator_active:
        logging.info(f"[–û–ø–µ—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–µ–Ω] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {actual_conv_id}. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î, –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.")
        timestamp_in_message = f"[{datetime.utcnow() + timedelta(hours=6):%Y-%m-%d_%H-%M-%S}]"
        message_to_store = f"{timestamp_in_message} {message_text_from_vk}"
        store_dialog_in_db(
            conv_id=actual_conv_id, role="user", message_text_with_timestamp=message_to_store, client_info=""
        )
        dialog_history_dict.setdefault(actual_conv_id, []).append({"user": message_to_store, "client_info": ""})
        return
    else:
        logging.info(f"[–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {actual_conv_id} –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–æ—Ç–æ–º –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏.")
        user_buffers.setdefault(actual_conv_id, []).append(message_text_from_vk)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {full_name_display} (conv_id: {actual_conv_id}) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä. –ë—É—Ñ–µ—Ä: {user_buffers[actual_conv_id]}")

        if not dialog_history_dict.get(actual_conv_id):
            if "–æ–ø–µ—Ä–∞—Ç–æ—Ä" not in message_text_from_vk.lower():
                send_telegram_notification(user_question_text=message_text_from_vk, dialog_id=actual_conv_id, first_name=first_name, last_name=last_name)

        if "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in message_text_from_vk.lower():
            temp_history_for_summary = list(dialog_history_dict.get(actual_conv_id, []))
            temp_history_for_summary.append({'user': message_text_from_vk})
            summary, reason = generate_summary_and_reason(temp_history_for_summary, app.model)
            initial_q_for_op_notify = user_buffers[actual_conv_id][0] if user_buffers[actual_conv_id] else message_text_from_vk
            send_operator_request_notification(dialog_id=actual_conv_id, initial_question=initial_q_for_op_notify, dialog_summary=summary, reason_guess=reason, first_name=first_name, last_name=last_name)

        if actual_conv_id in client_timers:
            client_timers[actual_conv_id].cancel()
        
        client_timer_thread = threading.Timer(USER_MESSAGE_BUFFERING_DELAY, generate_and_send_response, args=(actual_conv_id, vk_api_object, vk_callback_data, app.model))
        client_timers[actual_conv_id] = client_timer_thread
        client_timer_thread.start()
        logging.info(f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –Ω–∞ {USER_MESSAGE_BUFFERING_DELAY}—Å –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ {actual_conv_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω/–ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")

# ====
# 10. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ò –û–¢–ü–†–ê–í–ö–ê –û–¢–í–ï–¢–ê –ë–û–¢–ê –ü–û–°–õ–ï –ó–ê–î–ï–†–ñ–ö–ò
# ====
def generate_and_send_response(conv_id_to_respond, vk_api_for_sending, vk_callback_data, model):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ USER_MESSAGE_BUFFERING_DELAY.
    """
    logging.info(f"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è generate_and_send_response –¥–ª—è conv_id: {conv_id_to_respond}")

    try:
        if check_operator_activity_and_cleanup(conv_id_to_respond):
            logging.info(f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞ –¥–ª—è conv_id {conv_id_to_respond} –ü–û–î–ê–í–õ–ï–ù –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –ë–î.")
            return
    except Exception as e_op_check:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è conv_id {conv_id_to_respond}: {e_op_check}. –ë–æ—Ç –ù–ï –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ü–µ–ª—è—Ö –ø—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏.")
        return

    if conv_id_to_respond in operator_timers:
        logging.info(f"–û—Ç–≤–µ—Ç –¥–ª—è conv_id {conv_id_to_respond} –Ω–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: –∞–∫—Ç–∏–≤–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (operator_timers).")
        return

    buffered_messages = user_buffers.get(conv_id_to_respond, [])
    if not buffered_messages:
        logging.info(f"–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±—É—Ñ–µ—Ä–µ –¥–ª—è conv_id {conv_id_to_respond}. –û—Ç–≤–µ—Ç –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è.")
        if conv_id_to_respond in client_timers:
            del client_timers[conv_id_to_respond]
            logging.debug(f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è conv_id {conv_id_to_respond} —É–¥–∞–ª–µ–Ω (–ø—É—Å—Ç–æ–π –±—É—Ñ–µ—Ä).")
        return

    combined_user_text = "\n".join(buffered_messages).strip()
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è conv_id {conv_id_to_respond} –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–∑ –±—É—Ñ–µ—Ä–∞. –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{combined_user_text[:100]}...'")
    user_buffers[conv_id_to_respond] = []

    if conv_id_to_respond in client_timers:
        del client_timers[conv_id_to_respond]
        logging.debug(f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è conv_id {conv_id_to_respond} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")

    first_name, last_name = get_user_name_from_db(conv_id_to_respond)
    user_display_name = f"{first_name} {last_name}".strip() if first_name or last_name else f"User_{conv_id_to_respond}"

    try:
        context_from_builder = call_context_builder(vk_callback_data)
        logging.info(f"Context Builder —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è conv_id {conv_id_to_respond}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Context Builder –¥–ª—è conv_id {conv_id_to_respond}: {e}")
        logging.error(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è conv_id {conv_id_to_respond} –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ Context Builder")
        return

    relevant_titles_from_kb = find_relevant_titles_with_gemini(combined_user_text, model)

    bot_response_text = generate_response(
        user_question_text=combined_user_text,
        context_from_builder=context_from_builder,
        current_custom_prompt=custom_prompt,
        user_first_name=first_name,
        model=model,
        relevant_kb_titles=relevant_titles_from_kb
    )

    timestamp_utc_for_db = datetime.utcnow()
    timestamp_in_message_text = (timestamp_utc_for_db + timedelta(hours=6)).strftime("%Y-%m-%d_%H-%M-%S")

    user_message_with_ts_for_storage = f"[{timestamp_in_message_text}] {combined_user_text}"
    store_dialog_in_db(
        conv_id=conv_id_to_respond, 
        role="user", 
        message_text_with_timestamp=user_message_with_ts_for_storage,
        client_info=""
    )
    dialog_history_dict.setdefault(conv_id_to_respond, []).append(
        {"user": user_message_with_ts_for_storage, "client_info": ""}
    )

    bot_message_with_ts_for_storage = f"[{timestamp_in_message_text}] {bot_response_text}"
    store_dialog_in_db(
        conv_id=conv_id_to_respond, 
        role="bot", 
        message_text_with_timestamp=bot_message_with_ts_for_storage,
        client_info=""
    )
    dialog_history_dict.setdefault(conv_id_to_respond, []).append(
        {"bot": bot_message_with_ts_for_storage}
    )

    log_file_path_for_processed = user_log_files.get(conv_id_to_respond)
    if log_file_path_for_processed:
        try:
            with open(log_file_path_for_processed, "a", encoding="utf-8") as log_f:
                log_f.write(f"[{timestamp_in_message_text}] {user_display_name} (processed): {combined_user_text}\n")
                if relevant_titles_from_kb:
                    log_f.write(f"[{timestamp_in_message_text}] –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –ë–ó (–¥–ª—è processed): {', '.join(relevant_titles_from_kb)}\n")
                log_f.write(f"[{timestamp_in_message_text}] Context Builder: Context retrieved successfully\n")
                log_f.write(f"[{timestamp_in_message_text}] –ú–æ–¥–µ–ª—å: {bot_response_text}\n\n")
            upload_log_to_yandex_disk(log_file_path_for_processed)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª (processed) '{log_file_path_for_processed}': {e}")
    else:
        logging.warning(f"–ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É –¥–ª—è conv_id {conv_id_to_respond} –Ω–µ –Ω–∞–π–¥–µ–Ω. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–ø—É—â–µ–Ω–æ.")

    if vk_api_for_sending:
        try:
            vk_api_for_sending.messages.send(
                user_id=conv_id_to_respond,
                message=bot_response_text,
                random_id=int(time.time() * 10000)
            )
            logging.info(f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {conv_id_to_respond}.")
        except vk_api.ApiError as e:
            logging.error(f"VK API –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {conv_id_to_respond}: {e}")
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è VK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {conv_id_to_respond}: {e}")
    else:
        logging.warning(f"–û–±—ä–µ–∫—Ç VK API –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ generate_and_send_response –¥–ª—è conv_id {conv_id_to_respond}. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    try:
        call_summary_updater_async(conv_id_to_respond)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Summary Updater –¥–ª—è conv_id {conv_id_to_respond}: {e}")


# ====
# 11. –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK –û–¢ VK –ò –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ====
@app.route("/callback", methods=["POST"])
def callback_handler():
    data_from_vk = request.json

    event_type = data_from_vk.get("type")
    if VK_SECRET_KEY and data_from_vk.get("secret") != VK_SECRET_KEY:
        logging.warning("Callback: –ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á.")
        return "forbidden", 403

    if event_type == "confirmation":
        if not VK_CONFIRMATION_TOKEN:
            logging.error("Callback: VK_CONFIRMATION_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return "error", 500
        logging.info("Callback: –ø–æ–ª—É—á–µ–Ω confirmation –∑–∞–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return VK_CONFIRMATION_TOKEN, 200

    event_id = data_from_vk.get("event_id")
    if event_id:
        current_time_ts = time.time()
        for eid in list(recent_event_ids.keys()):
            if current_time_ts - recent_event_ids[eid] > EVENT_ID_TTL:
                del recent_event_ids[eid]
        if event_id in recent_event_ids:
            logging.info(f"Callback: –î—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è event_id={event_id} (type={event_type}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return "ok", 200
        else:
            recent_event_ids[event_id] = current_time_ts
    else:
        logging.warning(f"Callback: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç event_id –≤ —Å–æ–±—ã—Ç–∏–∏ —Ç–∏–ø–∞ {event_type}.")

    if event_type not in ("message_new", "message_reply"):
        logging.info(f"Callback: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞ '{event_type}'.")
        return "ok", 200

    vk_event_object = data_from_vk.get("object")
    actual_message_payload = None

    if isinstance(vk_event_object, dict):
        if 'message' in vk_event_object and isinstance(vk_event_object.get('message'), dict):
            actual_message_payload = vk_event_object.get('message')
        else:
            actual_message_payload = vk_event_object
    else:
        logging.warning(f"Callback: 'object' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º –≤ —Å–æ–±—ã—Ç–∏–∏ {event_type}: {data_from_vk}")
        return "ok", 200

    if not isinstance(actual_message_payload, dict):
        logging.warning(f"Callback: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ª—É—á–µ–Ω–æ: {actual_message_payload}")
        return "ok", 200

    message_text = actual_message_payload.get("text", "")
    from_id = actual_message_payload.get("from_id")
    peer_id = actual_message_payload.get("peer_id")
    is_outgoing = True if actual_message_payload.get("out") == 1 else False
    
    conversation_id_for_handler = None
    if event_type == "message_reply":
        is_outgoing = True
        if peer_id:
            conversation_id_for_handler = peer_id
        else: 
            logging.warning(f"Callback (message_reply): –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç peer_id. from_id={from_id}, actual_payload={actual_message_payload}")
            return "ok", 200
    elif event_type == "message_new":
        conversation_id_for_handler = peer_id if is_outgoing else from_id
    else:
        return "ok", 200

    if not from_id or not conversation_id_for_handler:
        logging.warning(f"Callback: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å from_id –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å conversation_id. from_id={from_id}, conv_id={conversation_id_for_handler}, payload={actual_message_payload}")
        return "ok", 200

    if not message_text.strip() and not actual_message_payload.get("attachments"):
        logging.info(f"Callback: –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤–ª–æ–∂–µ–Ω–∏–π) –æ—Ç from_id {from_id} –≤ conv_id {conversation_id_for_handler}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return "ok", 200
    elif not message_text.strip() and actual_message_payload.get("attachments"):
        message_text = "[–í–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
        logging.info(f"Callback: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç from_id {from_id} —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º, –Ω–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä.")

    vk_session_for_handler = vk_api.VkApi(token=VK_COMMUNITY_TOKEN)
    vk_api_local = vk_session_for_handler.get_api()

    handle_new_message(
        user_id_from_vk=from_id,
        message_text_from_vk=message_text, 
        vk_api_object=vk_api_local, 
        is_outgoing_message=is_outgoing, 
        conversation_id=conversation_id_for_handler,
        vk_callback_data=data_from_vk
    )

    return "ok", 200


if __name__ == "__main__":
    credentials_path = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")
    if not credentials_path:
        logging.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è 'GOOGLE_APPLICATION_CREDENTIALS' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        exit(1)
    
    credentials_path = credentials_path.strip(' "')
    if not os.path.exists(credentials_path):
        logging.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {credentials_path}")
        exit(1)

    try:
        credentials = service_account.Credentials.from_service_account_file(credentials_path)
        vertexai.init(project=PROJECT_ID, location=LOCATION, credentials=credentials)
        app.model = GenerativeModel(MODEL_NAME)
        logging.info("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Vertex AI —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logging.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Vertex AI. –û—à–∏–±–∫–∞: {e}")
        exit(1)

    if not DATABASE_URL:
        logging.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
        exit(1)
    if not VK_COMMUNITY_TOKEN or not VK_CONFIRMATION_TOKEN:
        logging.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VK_COMMUNITY_TOKEN –∏–ª–∏ VK_CONFIRMATION_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã VK.")
    
    logging.info("–ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
    server_port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=server_port, debug=False)