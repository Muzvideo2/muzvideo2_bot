import os
import time
import json
import requests
import psycopg2  # <-- –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL
from datetime import datetime, timedelta
import threading
import vk_api
from flask import Flask, request, jsonify
from urllib.parse import quote

# ==============================
# –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
# ==============================
TELEGRAM_TOKEN     = os.environ.get("TELEGRAM_TOKEN", "")
ADMIN_CHAT_ID      = os.environ.get("ADMIN_CHAT_ID", "")
GEMINI_API_KEY     = os.environ.get("GEMINI_API_KEY", "")
VK_COMMUNITY_TOKEN = os.environ.get("VK_COMMUNITY_TOKEN", "")
YANDEX_DISK_TOKEN  = os.environ.get("YANDEX_DISK_TOKEN", "")
VK_SECRET_KEY      = os.environ.get("VK_SECRET_KEY", "")
VK_CONFIRMATION_TOKEN = os.environ.get("VK_CONFIRMATION_TOKEN", "")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã PostgreSQL
DATABASE_URL = os.environ.get("DATABASE_URL")

# ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ (–Ω—É–∂–Ω–æ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ https://vk.com/gim<community_id>?sel=<user_id>)
# –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏–º–µ–µ—Ç –∞–¥—Ä–µ—Å https://vk.com/club48116621, —Ç–æ –µ–≥–æ ID = 48116621
VK_COMMUNITY_ID = "48116621"  # <-- –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π ID –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞

# ==============================
# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
# ==============================
knowledge_base_path = "knowledge_base.json"
prompt_path         = "prompt.txt"
logs_directory      = "dialog_logs"

# ==============================
# –ü—Ä–æ—á–∏—Ç–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –ø—Ä–æ–º–ø—Ç
# ==============================
if not os.path.exists(logs_directory):
    os.makedirs(logs_directory, exist_ok=True)

with open(knowledge_base_path, "r", encoding="utf-8") as f:
    knowledge_base = json.load(f)

with open(prompt_path, "r", encoding="utf-8") as f:
    custom_prompt = f.read().strip()

# ==============================
# –°–µ—Ä–≤–∏—Å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ==============================
gemini_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ (–ø–æ user_id)
dialog_history_dict = {}

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (user_id -> (first_name, last_name)) –∏ (user_id -> –ø—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É)
user_names = {}
user_log_files = {}

# –õ–æ–≥-—Ñ–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ–º, –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞–µ–º –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
log_file_path = os.path.join(
    logs_directory,
    f"dialog_{datetime.utcnow().strftime('%Y-%m-%d_%H-%M-%S')}.txt"
)


# ==============================
# 1. –§–£–ù–ö–¶–ò–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –í –¢–ï–õ–ï–ì–†–ê–ú
# ==============================
def send_telegram_notification(user_question, dialog_id, first_name="", last_name=""):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ "–æ–ø–µ—Ä–∞—Ç–æ—Ä".
    –î–∏–∞–ª–æ–≥-—Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ https://vk.com/gim<community_id>?sel=<user_id>.
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∏–∞–ª–æ–≥ –≤–Ω—É—Ç—Ä–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:
    vk_dialog_link = f"https://vk.com/gim{VK_COMMUNITY_ID}?sel={dialog_id}"

    # –£–±–∏—Ä–∞–µ–º –¥–∞—Ç—É/–≤—Ä–µ–º—è (–¢–µ–ª–µ–≥—Ä–∞–º —Å–∞–º –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç) –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–º—è/—Ñ–∞–º–∏–ª–∏—é
    message = f"""
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name}
–°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {user_question}
üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥: {vk_dialog_link}
    """.strip()

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    requests.post(url, data=data)


def send_operator_notification(dialog_id, initial_question, dialog_summary, reason_guess, first_name="", last_name=""):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞.
    """
    vk_dialog_link = f"https://vk.com/gim{VK_COMMUNITY_ID}?sel={dialog_id}"

    message = f"""
üÜò –ó–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name}
–ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {initial_question}
–°–≤–æ–¥–∫–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {dialog_summary}
–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –ø—Ä–∏—á–∏–Ω–∞: {reason_guess}
üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∏–∞–ª–æ–≥: {vk_dialog_link}
    """.strip()

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {
        "chat_id": ADMIN_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    requests.post(url, data=data)


# ==============================
# 2. –†–ê–ë–û–¢–ê –° –Ø–ù–î–ï–ö–°.–î–ò–°–ö–û–ú: –ó–ê–ì–†–£–ó–ö–ê –õ–û–ì-–§–ê–ô–õ–û–í
# ==============================
def upload_log_to_yandex_disk(log_file_path):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    create_dir_url = "https://cloud-api.yandex.net/v1/disk/resources"
    headers = {"Authorization": f"OAuth {YANDEX_DISK_TOKEN}"}
    params = {"path": "disk:/app-logs"}
    requests.put(create_dir_url, headers=headers, params=params)

    if not os.path.exists(log_file_path):
        return

    if not YANDEX_DISK_TOKEN:
        print("YANDEX_DISK_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–æ–≤.")
        return

    file_name = os.path.basename(log_file_path)
    ya_path = f"disk:/app-logs/{file_name}"

    get_url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params = {
        "path": ya_path,
        "overwrite": "true"
    }
    headers = {
        "Authorization": f"OAuth {YANDEX_DISK_TOKEN}"
    }
    r = requests.get(get_url, headers=headers, params=params)
    if r.status_code != 200:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:", r.text)
        return

    href = r.json().get("href", "")
    if not href:
        print("–ù–µ –Ω–∞—à–ª–∏ 'href' –≤ –æ—Ç–≤–µ—Ç–µ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞:", r.text)
        return

    with open(log_file_path, "rb") as f:
        upload_resp = requests.put(href, files={"file": f})
        if upload_resp.status_code == 201:
            print(f"–õ–æ–≥-—Ñ–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")
        else:
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫:", upload_resp.text)


# ==============================
# 3. –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ò–ê–õ–û–ì–û–í –í POSTGRES
# ==============================
def store_dialog_in_db(user_id, user_message, bot_message):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –ø–∞—Ä—É (user_message + bot_message) –≤ –±–∞–∑—É PostgreSQL.
    """
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cur.execute("""
            CREATE TABLE IF NOT EXISTS dialogues (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                user_message TEXT,
                bot_message TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        # –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏
        cur.execute(
            """INSERT INTO dialogues (user_id, user_message, bot_message)
               VALUES (%s, %s, %s)""",
            (user_id, user_message, bot_message)
        )

        conn.commit()
        cur.close()
        conn.close()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –≤ –ë–î:", e)


def load_dialog_from_db(user_id):
    """
    –ü–æ–¥–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ user_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤–∏–¥–∞: [{"user": "...", "bot": "..."}, ...].
    """
    dialog_history = []
    try:
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        # –ë–µ—Ä—ë–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ user_id, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ id (–∏–ª–∏ –ø–æ created_at)
        cur.execute("""
            SELECT user_message, bot_message 
            FROM dialogues
            WHERE user_id = %s
            ORDER BY id ASC
        """, (user_id,))

        rows = cur.fetchall()
        for row in rows:
            user_m = row[0]
            bot_m  = row[1]
            dialog_history.append({"user": user_m, "bot": bot_m})

        cur.close()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –ë–î –¥–ª—è user_id={user_id}:", e)

    return dialog_history


# ==============================
# 4. –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ==============================
def log_dialog(user_question, bot_response, relevant_titles, relevant_answers, user_id):
    """
    –õ–æ–≥–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª + –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä—É (user_message, bot_message) –≤ PostgreSQL.
    –ë–µ–∑ –ø–æ–¥—Å—á—ë—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    store_dialog_in_db(user_id, user_question, bot_response)

    current_time = datetime.utcnow() + timedelta(hours=6)
    formatted_time = current_time.strftime("%Y-%m-%d_%H-%M-%S")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥-—Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_log_files:
        local_log_file = user_log_files[user_id]
    else:
        local_log_file = log_file_path

    # –ü–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª
    with open(local_log_file, "a", encoding="utf-8") as log_file:
        log_file.write(f"[{formatted_time}] user_id={user_id}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_question}\n")
        if relevant_titles and relevant_answers:
            for title, answer in zip(relevant_titles, relevant_answers):
                log_file.write(f"[{formatted_time}] –ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {title} -> {answer}\n")
        log_file.write(f"[{formatted_time}] –ú–æ–¥–µ–ª—å: {bot_response}\n\n")

    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–æ–≥–∞:\n{open(local_log_file, 'r', encoding='utf-8').read()}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    upload_log_to_yandex_disk(local_log_file)


# ==============================
# 5. –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GEMINI
# ==============================
def find_relevant_titles_with_gemini(user_question):
    titles = list(knowledge_base.keys())
    prompt_text = f"""
–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤-–∫–ª—é—á–µ–π:
{', '.join(titles)}

–ù–∞–π–¥–∏ —Ç—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –∫ –∑–∞–ø—Ä–æ—Å—É: "{user_question}".
–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Å–∞–º–∏ –≤–æ–ø—Ä–æ—Å—ã, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """.strip()

    data = {
        "contents": [{"parts": [{"text": prompt_text}]}]
    }
    headers = {"Content-Type": "application/json"}

    for attempt in range(5):
        resp = requests.post(gemini_url, headers=headers, json=data)
        if resp.status_code == 200:
            try:
                result = resp.json()
                text_raw = result['candidates'][0]['content']['parts'][0]['text']
                lines = text_raw.strip().split("\n")
                return [ln.strip() for ln in lines if ln.strip()]
            except KeyError:
                return []
        elif resp.status_code == 500:
            time.sleep(10)
        else:
            return []
    return []


def generate_response(user_question, dialog_history, custom_prompt, relevant_answers=None):
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
    history_text = "\n".join([
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {turn.get('user','–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n–ú–æ–¥–µ–ª—å: {turn.get('bot','–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}"
        for turn in dialog_history
    ])

    knowledge_hint = (
        f"–ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {relevant_answers}" 
        if relevant_answers else ""
    )

    full_prompt = (
        f"{custom_prompt}\n\n"
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:\n{history_text}\n\n"
        f"{knowledge_hint}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_question}\n–ú–æ–¥–µ–ª—å:"
    )

    data = {
        "contents": [{"parts": [{"text": full_prompt}]}]
    }
    headers = {"Content-Type": "application/json"}

    for attempt in range(5):
        resp = requests.post(gemini_url, headers=headers, json=data)
        if resp.status_code == 200:
            try:
                result = resp.json()
                return result['candidates'][0]['content']['parts'][0]['text']
            except KeyError:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏."
        elif resp.status_code == 500:
            time.sleep(10)
        else:
            return f"–û—à–∏–±–∫–∞: {resp.status_code}. {resp.text}"
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."


def generate_summary_and_reason(dialog_history):
    history_text = " | ".join([
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {turn.get('user', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} -> –ú–æ–¥–µ–ª—å: {turn.get('bot', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}"
        for turn in dialog_history[-10:]
    ])
    prompt_text = f"""
–°–≤–æ–¥–∫–∞ –¥–∏–∞–ª–æ–≥–∞: {history_text}

–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞:
1. –°—Ñ–æ—Ä–º–∏—Ä—É–π —Å–≤–æ–¥–∫—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è.
2. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏ –ø—Ä–∏—á–∏–Ω—É, –ø–æ—á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
    """.strip()
    data = {
        "contents": [{"parts": [{"text": prompt_text}]}]
    }
    headers = {"Content-Type": "application/json"}

    for attempt in range(5):
        resp = requests.post(gemini_url, headers=headers, json=data)
        if resp.status_code == 200:
            try:
                result = resp.json()
                output = result['candidates'][0]['content']['parts'][0]['text'].split("\n", 1)
                dialog_summary = output[0].strip() if len(output) > 0 else "–°–≤–æ–¥–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞"
                reason_guess   = output[1].strip() if len(output) > 1 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
                return dialog_summary, reason_guess
            except (KeyError, IndexError):
                return "–°–≤–æ–¥–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        elif resp.status_code == 500:
            time.sleep(10)
        else:
            return "–û—à–∏–±–∫–∞ API", "–û—à–∏–±–∫–∞ API"
    return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–∏—Å–æ–º"


# ==============================
# 6. 30-—Å–µ–∫—É–Ω–¥–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏ –±—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
# ==============================
user_buffers = {}
user_timers  = {}
last_questions = {}

DELAY_SECONDS = 30

# ==============================
# 7. –ü–ê–£–ó–ê –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# ==============================

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ API –ø–∞—É–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def is_user_paused(full_name):
    try:
        response = requests.get(f"https://telegram-bot-k2h1.onrender.com/is_paused/{full_name}", timeout=5)
        if response.status_code == 200:
            paused_status = response.json().get("paused", False)
            print(f"–°—Ç–∞—Ç—É—Å –ø–∞—É–∑—ã –¥–ª—è {full_name}: {paused_status}")
            return paused_status
        else:
            print(f"–û—à–∏–±–∫–∞ API: {response.status_code}, {response.text}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
        return False





paused_users = set()

def handle_new_message(user_id, text, vk, is_outgoing=False):
    user_info = vk.users.get(user_ids=user_id)
    first_name = user_info[0].get("first_name", "")
    last_name = user_info[0].get("last_name", "")
    full_name = f"{first_name}_{last_name}"
    lower_text = text.lower()
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–µ (–æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–∏—à–µ—Ç –±–æ—Ç—É)
    if is_outgoing:
        dialog_history = dialog_history_dict.setdefault(user_id, [])
        dialog_history.append({"operator": text})

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        current_time = datetime.utcnow() + timedelta(hours=6)
        formatted_time = current_time.strftime("%Y-%m-%d_%H-%M-%S")
        if user_id in user_log_files:
            op_log_path = user_log_files[user_id]
        else:
            op_log_path = log_file_path
        with open(op_log_path, "a", encoding="utf-8") as f:
            f.write(f"[{formatted_time}] user_id={user_id}, –û–ø–µ—Ä–∞—Ç–æ—Ä: {text}\n\n")

        if "—è –ø–æ—Å—Ç–∞–≤–∏–ª –±–æ—Ç–∞ –Ω–∞ –ø–∞—É–∑—É" in lower_text:
            paused_users.add(user_id)
        elif "–±–æ—Ç —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å" in lower_text:
            paused_users.discard(user_id)
        return

    # 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–µ, –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
    if user_id not in dialog_history_dict:
        existing_history = load_dialog_from_db(user_id)
        dialog_history_dict[user_id] = existing_history

    dialog_history = dialog_history_dict[user_id]

    # 2. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–æ–æ–±—â–µ (—Ç–æ –µ—Å—Ç—å –µ—Å–ª–∏ –≤ –ë–î –∏ –ø–∞–º—è—Ç–∏ –ø—É—Å—Ç–æ) –ø–æ–ª—É—á–∞–µ–º –∏–º—è/—Ñ–∞–º–∏–ª–∏—é
    if len(dialog_history) == 0:
        user_info = vk.users.get(user_ids=user_id)
        first_name = user_info[0].get("first_name", "")
        last_name  = user_info[0].get("last_name", "")
        user_names[user_id] = (first_name, last_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π log_file_path c –∏–º–µ–Ω–µ–º/—Ñ–∞–º–∏–ª–∏–µ–π
        now_str = datetime.utcnow().strftime('%Y-%m-%d_%H-%M-%S')
        custom_file_name = f"dialog_{now_str}_{first_name}_{last_name}.txt"
        custom_log_path  = os.path.join(logs_directory, custom_file_name)
        user_log_files[user_id] = custom_log_path

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –¢–µ–ª–µ–≥—Ä–∞–º (–µ—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤–∞ "–æ–ø–µ—Ä–∞—Ç–æ—Ä")
        if "–æ–ø–µ—Ä–∞—Ç–æ—Ä" not in lower_text:
            send_telegram_notification(
                user_question=text,
                dialog_id=user_id,
                first_name=first_name,
                last_name=last_name
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º—è–Ω—É–ª "–æ–ø–µ—Ä–∞—Ç–æ—Ä"
        if "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in lower_text:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∏–∞–ª–æ–≥–µ
            if len(dialog_history) == 0:
                first_name, last_name = user_names.get(user_id, ("", ""))
                send_telegram_notification(
                    user_question=text,
                    dialog_id=user_id,
                    first_name=first_name,
                    last_name=last_name
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
                summary, reason = generate_summary_and_reason(dialog_history)
                initial_q = last_questions.get(user_id, "")
                first_name, last_name = user_names.get(user_id, ("", ""))
                send_operator_notification(
                    user_id,
                    initial_q,
                    summary,
                    reason,
                    first_name=first_name,
                    last_name=last_name
                )

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ paused_names
    if is_user_paused(full_name):
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–∞—É–∑–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    # 4. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
    user_buffers.setdefault(user_id, []).append(text)
    last_questions[user_id] = text

    # 5. –°–±—Ä–∞—Å—ã–≤–∞–µ–º/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    if user_id in user_timers:
        user_timers[user_id].cancel()
    timer = threading.Timer(DELAY_SECONDS, generate_and_send_response, args=(user_id, vk))
    user_timers[user_id] = timer
    timer.start()

def generate_and_send_response(user_id, vk):
    if vk is None:
        print("–û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç vk –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!")
        return

    if user_id in paused_users:
        user_buffers[user_id] = []
        return

    msgs = user_buffers.get(user_id, [])
    if not msgs:
        return
    combined_text = "\n".join(msgs)
    user_buffers[user_id] = []

    dialog_history = dialog_history_dict[user_id]
    relevant_titles = find_relevant_titles_with_gemini(combined_text)
    relevant_answers = [knowledge_base[t] for t in relevant_titles if t in knowledge_base]

    model_response = generate_response(combined_text, dialog_history, custom_prompt, relevant_answers)

    # –õ–æ–≥–∏—Ä—É–µ–º
    log_dialog(combined_text, model_response, relevant_titles, relevant_answers, user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª "–æ–ø–µ—Ä–∞—Ç–æ—Ä" ‚Äî –æ—Ç—Å—ã–ª–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–æ–¥—Ä–æ–±–Ω–æ–µ)
    if "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in combined_text.lower():
        summary, reason = generate_summary_and_reason(dialog_history)
        initial_q = last_questions.get(user_id, "")
        first_name, last_name = user_names.get(user_id, ("", ""))
        send_operator_notification(
            user_id,
            initial_q,
            summary,
            reason,
            first_name=first_name,
            last_name=last_name
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –ø–∞–º—è—Ç–∏
    dialog_history.append({"user": combined_text, "bot": model_response})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –í–ö
    vk.messages.send(
        user_id=user_id,
        message=model_response,
        random_id=int(time.time() * 1000)
    )


# ==============================
# 8. –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ
# ==============================
def main():
    vk_session = vk_api.VkApi(token=VK_COMMUNITY_TOKEN)
    vk = vk_session.get_api()


# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

@app.route("/clear_context/<full_name>", methods=["POST"])
def clear_context(full_name):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à–∞.
    """
    user_id = None

    # –ù–∞–π—Ç–∏ user_id –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
    for uid, (first, last) in user_names.items():
        if f"{first}_{last}" == full_name:
            user_id = uid
            break

    if not user_id:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 404

    try:
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = psycopg2.connect(DATABASE_URL)
        cur = conn.cursor()
        cur.execute("DELETE FROM dialogues WHERE user_id = %s", (user_id,))
        conn.commit()
        cur.close()
        conn.close()

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        dialog_history_dict.pop(user_id, None)
        user_buffers.pop(user_id, None)
        user_timers.pop(user_id, None)
        last_questions.pop(user_id, None)

        return "–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω", 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è {full_name}: {e}")
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", 500

@app.route("/callback", methods=["POST"])
def callback():
    data = request.json

    if data.get("type") == "confirmation":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –í–ö –ø—Ä–∏–≤—è–∑–∞–ª Callback
        return VK_CONFIRMATION_TOKEN

    if VK_SECRET_KEY and data.get("secret") != VK_SECRET_KEY:
        return "Invalid secret", 403

    if data.get("type") == "message_new":
        msg = data["object"]["message"]
        user_id = msg["from_id"]
        text = msg["text"]

        out_flag = msg.get("out", 0)
        is_outgoing = (out_flag == 1)

        vk_session = vk_api.VkApi(token=VK_COMMUNITY_TOKEN)
        vk = vk_session.get_api()

        handle_new_message(user_id, text, vk, is_outgoing=is_outgoing)

    return "ok"


def process_message(user_id, text):
    """
    –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã –Ω—É–∂–Ω–æ –±—ã–ª–æ).
    """
    send_message(user_id, f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}")


def send_message(user_id, message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
    """
    url = "https://api.vk.com/method/messages.send"
    params = {
        "access_token": VK_COMMUNITY_TOKEN,
        "user_id": user_id,
        "message": message,
        "random_id": 0,
        "v": "5.131"
    }
    requests.post(url, params=params)


if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)