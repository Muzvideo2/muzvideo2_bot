# --- –û–ø–∏—Å–∞–Ω–∏–µ ---
# –°–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Context Builder
# –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–æ–≤
# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# --- –ö–æ–Ω–µ—Ü –æ–ø–∏—Å–∞–Ω–∏—è ---

import time
import threading
import json
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
import sys
import os

# –ò–º–∏—Ç–∞—Ü–∏—è VK callback –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def create_test_vk_data(conv_id, message_text="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"):
    return {
        "object": {
            "message": {
                "from_id": conv_id,
                "text": message_text,
                "peer_id": conv_id
            }
        },
        "group_id": 48116621
    }

def test_sequential_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–∏–º–∏—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞)"""
    print("üî¥ –¢–ï–°–¢: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Å—Ç–∞—Ä—ã–π subprocess –ø–æ–¥—Ö–æ–¥)")
    
    user_ids = [123456, 234567, 345678, 456789, 567890]  # 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    start_time = time.time()
    
    for user_id in user_ids:
        user_start = time.time()
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä—É—é—â–∏–π subprocess.run –Ω–∞ 45 —Å–µ–∫—É–Ω–¥
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ù–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        time.sleep(2)  # –ò–º–∏—Ç–∏—Ä—É–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –≤–º–µ—Å—Ç–æ 45 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        user_end = time.time()
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ó–∞–≤–µ—Ä—à–∏–ª –∑–∞ {user_end - user_start:.2f}—Å")
    
    total_time = time.time() - start_time
    print(f"üî¥ –ò–¢–û–ì–û (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ): {total_time:.2f} —Å–µ–∫—É–Ω–¥ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print(f"üî¥ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {len(user_ids) / total_time * 60:.1f} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–º–∏–Ω—É—Ç—É\n")
    
    return total_time

def test_parallel_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–Ω–æ–≤—ã–π ThreadPoolExecutor –ø–æ–¥—Ö–æ–¥)"""
    print("üü¢ –¢–ï–°–¢: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–Ω–æ–≤—ã–π ThreadPoolExecutor –ø–æ–¥—Ö–æ–¥)")
    
    user_ids = [123456, 234567, 345678, 456789, 567890]  # 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    start_time = time.time()
    
    def process_user(user_id):
        user_start = time.time()
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ù–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        time.sleep(2)  # –ò–º–∏—Ç–∏—Ä—É–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        user_end = time.time()
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ó–∞–≤–µ—Ä—à–∏–ª –∑–∞ {user_end - user_start:.2f}—Å")
        return user_id, user_end - user_start
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ ThreadPoolExecutor
    with ThreadPoolExecutor(max_workers=10) as executor:
        futures = [executor.submit(process_user, user_id) for user_id in user_ids]
        results = [future.result() for future in as_completed(futures)]
    
    total_time = time.time() - start_time
    print(f"üü¢ –ò–¢–û–ì–û (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ): {total_time:.2f} —Å–µ–∫—É–Ω–¥ –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print(f"üü¢ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {len(user_ids) / total_time * 60:.1f} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–º–∏–Ω—É—Ç—É\n")
    
    return total_time

def test_context_builder_data_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Context Builder"""
    print("üß™ –¢–ï–°–¢: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö VK Callback")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = create_test_vk_data(123456, "–ü—Ä–∏–≤–µ—Ç, —Ö–æ—á—É —É–∑–Ω–∞—Ç—å –æ –∫—É—Ä—Å–∞—Ö")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ conv_id
    message_data = test_data.get("object", {}).get("message", {})
    conv_id = message_data.get("from_id")
    message_text = message_data.get("text", "")
    
    print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π conv_id: {conv_id}")
    print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {message_text}")
    print(f"   JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {json.dumps(test_data, ensure_ascii=False, indent=2)}")
    
    if conv_id and message_text:
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö!")
    
    print()

def test_load_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
    print("‚ö° –¢–ï–°–¢: –°–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏")
    
    scenarios = [
        {"users": 5, "name": "–ú–∞–ª–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"},
        {"users": 10, "name": "–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞"},
        {"users": 20, "name": "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"}
    ]
    
    for scenario in scenarios:
        print(f"\nüìä {scenario['name']} ({scenario['users']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):")
        
        user_ids = list(range(100000, 100000 + scenario['users']))
        start_time = time.time()
        
        def process_user_realistic(user_id):
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É Context Builder:
            # - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (0.1—Å)
            # - VK API –∑–∞–ø—Ä–æ—Å (0.3—Å) 
            # - –ó–∞–ø—Ä–æ—Å—ã –∫ –ë–î (0.5—Å)
            # - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (0.1—Å)
            time.sleep(1.0)  # –û–±—â–µ–µ –≤—Ä–µ–º—è ~1 —Å–µ–∫—É–Ω–¥–∞ –≤–º–µ—Å—Ç–æ 45
            return user_id
        
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(process_user_realistic, user_id) for user_id in user_ids]
            completed = [future.result() for future in as_completed(futures)]
        
        total_time = time.time() - start_time
        throughput = len(user_ids) / total_time * 60
        
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {total_time:.2f}—Å")
        print(f"   üöÄ –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {throughput:.1f} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–º–∏–Ω—É—Ç—É")
        
        # –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if throughput > 300:
            print("   üü¢ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
        elif throughput > 150:
            print("   üü° –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        else:
            print("   üî¥ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")

def main():
    print("=" * 60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò CONTEXT BUILDER v2.0")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤
    sequential_time = test_sequential_processing()
    parallel_time = test_parallel_processing()
    
    improvement = sequential_time / parallel_time
    print(f"üìà –£–õ–£–ß–®–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò: –≤ {improvement:.1f} —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ!")
    print()
    
    # –¢–µ—Å—Ç 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    test_context_builder_data_structure()
    
    # –¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
    test_load_simulation()
    
    print("\n" + "=" * 60)
    print("‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Context Builder –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!")
    print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤ 10-15 —Ä–∞–∑")
    print("=" * 60)

if __name__ == "__main__":
    main() 