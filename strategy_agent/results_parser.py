#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü–∞—Ä—Å–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import json
import psycopg2
import logging
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent))

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(os.path.join(os.path.dirname(__file__), '..', '.env'))

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def get_database_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        return psycopg2.connect(database_url)
    else:
        # Fallback –∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º
        return psycopg2.connect(
            host=os.getenv('DB_HOST'),
            database=os.getenv('DB_NAME'),
            user=os.getenv('DB_USER'),
            password=os.getenv('DB_PASSWORD'),
            port=os.getenv('DB_PORT', 5432)
        )

def parse_analysis_results(result_file: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑: {result_file}")
    
    with open(result_file, 'r', encoding='utf-8') as f:
        analysis_data = json.load(f)
    
    return analysis_data

def get_client_profile_before_update(client_id: str, conn) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    cursor = conn.cursor()
    
    try:
        sql = """
        SELECT conv_id, lead_qualification, funnel_stage, client_activity, 
               personality_type, primary_motivation, churn_risk, engagement_level,
               updated_at, analysis_data
        FROM user_profiles 
        WHERE conv_id = %s
        """
        
        cursor.execute(sql, (client_id,))
        result = cursor.fetchone()
        
        if result:
            return {
                'conv_id': result[0],
                'lead_qualification': result[1],
                'funnel_stage': result[2],
                'client_activity': result[3],
                'personality_type': result[4],
                'primary_motivation': result[5],
                'churn_risk': result[6],
                'engagement_level': result[7],
                'updated_at': result[8],
                'analysis_data': result[9]
            }
        else:
            logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return {}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        return {}
    finally:
        cursor.close()

def update_client_profile(client_id: str, analysis_data: Dict[str, Any], conn):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
    
    cursor = conn.cursor()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        updates = {}
        
        # –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        if 'client_qualification' in analysis_data:
            qual_data = analysis_data['client_qualification']
            if isinstance(qual_data, dict):
                updates['lead_qualification'] = qual_data.get('current_level')
                updates['qualification_confidence'] = qual_data.get('confidence_score')
        
        # –≠—Ç–∞–ø –≤–æ—Ä–æ–Ω–∫–∏
        if 'funnel_stage_analysis' in analysis_data:
            funnel_data = analysis_data['funnel_stage_analysis']
            if isinstance(funnel_data, dict):
                updates['funnel_stage'] = funnel_data.get('current_stage')
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        if 'psychological_profile' in analysis_data:
            psych_data = analysis_data['psychological_profile']
            if isinstance(psych_data, dict):
                updates['personality_type'] = psych_data.get('personality_type')
                updates['primary_motivation'] = psych_data.get('primary_motivation')
                updates['communication_style'] = psych_data.get('communication_style')
        
        # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤
        if 'risk_assessment' in analysis_data:
            risk_data = analysis_data['risk_assessment']
            if isinstance(risk_data, dict):
                updates['churn_risk'] = risk_data.get('churn_probability')
                updates['engagement_level'] = risk_data.get('engagement_level')
        
        # –°—Ç—Ä–æ–∏–º SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if updates:
            set_clauses = []
            values = []
            
            for field, value in updates.items():
                if value is not None:
                    set_clauses.append(f"{field} = %s")
                    values.append(value)
            
            if set_clauses:
                values.extend([json.dumps(analysis_data, ensure_ascii=False), client_id])
                sql = f"""
                UPDATE user_profiles 
                SET {', '.join(set_clauses)}, 
                    updated_at = CURRENT_TIMESTAMP,
                    analysis_data = %s
                WHERE conv_id = %s
                """
                
                cursor.execute(sql, values)
                rows_updated = cursor.rowcount
                
                logger.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –æ–±–Ω–æ–≤–ª–µ–Ω ({len(set_clauses)} –ø–æ–ª–µ–π, {rows_updated} –∑–∞–ø–∏—Å–µ–π)")
            else:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
        
        conn.commit()
        
    except Exception as e:
        conn.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        raise
    finally:
        cursor.close()

def create_reminder(client_id: str, analysis_data: Dict[str, Any], conn) -> Optional[Dict[str, Any]]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
    
    cursor = conn.cursor()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        timing_data = analysis_data.get('next_contact_timing', {})
        strategy_data = analysis_data.get('return_strategy', {})
        
        if not isinstance(timing_data, dict) or not isinstance(strategy_data, dict):
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        recommended_timing = timing_data.get('recommended_timing', '1 –¥–µ–Ω—å')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–∞—Ç—É
        reminder_date = datetime.now()
        if '—á–∞—Å' in recommended_timing.lower():
            try:
                hours = int(recommended_timing.split()[0])
                reminder_date += timedelta(hours=hours)
            except (ValueError, IndexError):
                reminder_date += timedelta(hours=24)
        elif '–¥–µ–Ω—å' in recommended_timing.lower() or '–¥–Ω—è' in recommended_timing.lower():
            try:
                days = int(recommended_timing.split()[0])
                reminder_date += timedelta(days=days)
            except (ValueError, IndexError):
                reminder_date += timedelta(days=1)
        elif '–Ω–µ–¥–µ–ª—è' in recommended_timing.lower() or '–Ω–µ–¥–µ–ª–∏' in recommended_timing.lower():
            try:
                weeks = int(recommended_timing.split()[0])
                reminder_date += timedelta(weeks=weeks)
            except (ValueError, IndexError):
                reminder_date += timedelta(days=7)
        else:
            reminder_date += timedelta(days=1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –¥–µ–Ω—å
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        actions = strategy_data.get('recommended_actions', ['–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º'])
        insights = strategy_data.get('key_insights', ['–î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ'])
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ –∏–Ω—Å–∞–π—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ —Å–ø–∏—Å–∫–∏
        actions_text = '\n'.join(actions) if isinstance(actions, list) else str(actions)
        insights_text = '\n'.join(insights) if isinstance(insights, list) else str(insights)
        
        reminder_text = f"""ü§ñ –ê–ù–ê–õ–ò–ó –ö–õ–ò–ï–ù–¢–ê: {client_id}

üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
{actions_text}

üí° –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:
{insights_text}

‚è∞ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {timing_data.get('optimal_time', '—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã')}

üìã –ò—Å—Ç–æ—á–Ω–∏–∫: AI-–∞–Ω–∞–ª–∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
"""
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ë–î
        sql = """
        INSERT INTO reminders (conv_id, reminder_text, reminder_date, status, created_at)
        VALUES (%s, %s, %s, 'active', CURRENT_TIMESTAMP)
        RETURNING id, reminder_date, status
        """
        
        cursor.execute(sql, (client_id, reminder_text, reminder_date))
        result = cursor.fetchone()
        
        if result:
            reminder_id, actual_date, status = result
            logger.info(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (ID: {reminder_id}, –¥–∞—Ç–∞: {actual_date}, —Å—Ç–∞—Ç—É—Å: {status})")
            
            conn.commit()
            
            return {
                'id': reminder_id,
                'conv_id': client_id,
                'reminder_text': reminder_text,
                'reminder_date': actual_date,
                'status': status,
                'recommended_timing': recommended_timing
            }
        else:
            logger.error("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ")
            return None
        
    except Exception as e:
        conn.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        raise
    finally:
        cursor.close()

def verify_reminder_created(client_id: str, conn) -> Optional[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î"""
    cursor = conn.cursor()
    
    try:
        sql = """
        SELECT id, conv_id, reminder_text, reminder_date, status, created_at
        FROM reminders 
        WHERE conv_id = %s 
        ORDER BY created_at DESC 
        LIMIT 1
        """
        
        cursor.execute(sql, (client_id,))
        result = cursor.fetchone()
        
        if result:
            return {
                'id': result[0],
                'conv_id': result[1],
                'reminder_text': result[2],
                'reminder_date': result[3],
                'status': result[4],
                'created_at': result[5]
            }
        else:
            return None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        return None
    finally:
        cursor.close()

def main(result_file: str):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
    logger.info("=== –ó–ê–ü–£–°–ö –ü–ê–†–°–ï–†–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ê–ù–ê–õ–ò–ó–ê ===")
    
    try:
        # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analysis_data = parse_analysis_results(result_file)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
        client_id = analysis_data.get('client_id')
        if not client_id:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            import re
            match = re.search(r'(\d+)', os.path.basename(result_file))
            if match:
                client_id = match.group(1)
            else:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∫–ª–∏–µ–Ω—Ç–∞")
        
        logger.info(f"ID –∫–ª–∏–µ–Ω—Ç–∞: {client_id}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = get_database_connection()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            logger.info("=== –ü–†–û–§–ò–õ–¨ –î–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø ===")
            before_profile = get_client_profile_before_update(client_id, conn)
            if before_profile:
                logger.info(f"–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {before_profile.get('lead_qualification')}")
                logger.info(f"–≠—Ç–∞–ø –≤–æ—Ä–æ–Ω–∫–∏: {before_profile.get('funnel_stage')}")
                logger.info(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {before_profile.get('client_activity')}")
                logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {before_profile.get('updated_at')}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
            logger.info("=== –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø ===")
            update_client_profile(client_id, analysis_data, conn)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            logger.info("=== –°–û–ó–î–ê–ù–ò–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===")
            reminder_info = create_reminder(client_id, analysis_data, conn)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            logger.info("=== –ü–†–û–í–ï–†–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===")
            verification = verify_reminder_created(client_id, conn)
            
            if verification:
                logger.info(f"‚úÖ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û –í –ë–î:")
                logger.info(f"   ID: {verification['id']}")
                logger.info(f"   –î–∞—Ç–∞: {verification['reminder_date']}")
                logger.info(f"   –°—Ç–∞—Ç—É—Å: {verification['status']}")
                logger.info(f"   –°–æ–∑–¥–∞–Ω–æ: {verification['created_at']}")
            else:
                logger.error("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            
            logger.info("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞
            return {
                'before_profile': before_profile,
                'after_analysis': analysis_data,
                'reminder_info': reminder_info,
                'verification': verification
            }
            
        finally:
            conn.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        raise

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python results_parser.py <—Ñ–∞–π–ª_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤>")
        sys.exit(1)
    
    main(sys.argv[1])