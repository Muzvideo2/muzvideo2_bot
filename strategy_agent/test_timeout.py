#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–π–º-–∞—É—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
"""

import sys
import os
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_timeout_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–π–º-–∞—É—Ç–∞"""
    try:
        from client_card_analyzer import with_timeout, TimeoutError
        
        @with_timeout(5)  # 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º-–∞—É—Ç
        def slow_function():
            """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–Ω–∏–º–∞–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
            time.sleep(10)  # –°–ø–∏–º 10 —Å–µ–∫—É–Ω–¥ (–±–æ–ª—å—à–µ —Ç–∞–π–º-–∞—É—Ç–∞)
            return "–ù–µ –¥–æ–ª–∂–Ω–æ –¥–æ–π—Ç–∏ –¥–æ —ç—Ç–æ–≥–æ!"
        
        @with_timeout(5)  # 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º-–∞—É—Ç  
        def fast_function():
            """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
            time.sleep(2)  # –°–ø–∏–º 2 —Å–µ–∫—É–Ω–¥—ã (–º–µ–Ω—å—à–µ —Ç–∞–π–º-–∞—É—Ç–∞)
            return "–£—Å–ø–µ—Ö!"
        
        # –¢–µ—Å—Ç 1: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ø–æ —Ç–∞–π–º-–∞—É—Ç—É
        logging.info("=== –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞ ===")
        try:
            result = slow_function()
            logging.error(f"–û–®–ò–ë–ö–ê: –§—É–Ω–∫—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ —Ç–∞–π–º-–∞—É—Ç—É: {result}")
            return False
        except TimeoutError as e:
            logging.info(f"‚úÖ –£–°–ü–ï–•: –¢–∞–π–º-–∞—É—Ç —Å—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {e}")
        except Exception as e:
            logging.error(f"–û–®–ò–ë–ö–ê: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False
        
        # –¢–µ—Å—Ç 2: –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —É—Å–ø–µ—à–Ω–æ
        logging.info("=== –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ===")
        try:
            result = fast_function()
            logging.info(f"‚úÖ –£–°–ü–ï–•: –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å: {result}")
        except Exception as e:
            logging.error(f"–û–®–ò–ë–ö–ê: –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å: {e}")
            return False
        
        logging.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
        
    except ImportError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–∞–π–º-–∞—É—Ç–∞...")
    success = test_timeout_functionality()
    
    if success:
        logging.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –¢–∞–π–º-–∞—É—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        sys.exit(0)
    else:
        logging.error("‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Ç–∞–π–º-–∞—É—Ç–∞.")
        sys.exit(1)