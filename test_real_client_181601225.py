#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê–¢–û–†–ê –ö–ê–†–¢–û–ß–ï–ö –ù–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
–ö–ª–∏–µ–Ω—Ç conv_id = 181601225

–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∫–∞—Å–∫–∞–¥ –æ–ø–µ—Ä–∞—Ü–∏–π:
1. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î (data_exporter)
2. –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Vertex AI (client_card_analyzer) 
3. –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (results_parser)
4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ë–î

–ê–≤—Ç–æ—Ä: AI Assistant
–î–∞—Ç–∞: 2025-08-20
"""

import os
import sys
import json
import logging
import traceback
from datetime import datetime, timezone
import subprocess
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_real_client_181601225.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TARGET_CONV_ID = 181601225
TEST_NAME = "REAL_CLIENT_TEST_181601225"

class RealClientTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    
    def __init__(self):
        self.conv_id = TARGET_CONV_ID
        self.test_results = {
            'test_name': TEST_NAME,
            'conv_id': self.conv_id,
            'start_time': datetime.now(timezone.utc).isoformat(),
            'steps': {},
            'files_created': [],
            'errors': [],
            'success': False
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.check_environment()
    
    def check_environment(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logging.info("=== –ü–†–û–í–ï–†–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
        
        required_vars = [
            'DATABASE_URL',
            'GOOGLE_APPLICATION_CREDENTIALS'
        ]
        
        missing_vars = []
        for var in required_vars:
            if not os.environ.get(var):
                missing_vars.append(var)
            else:
                logging.info(f"‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        if missing_vars:
            error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}"
            logging.error(f"‚ùå {error_msg}")
            self.test_results['errors'].append(error_msg)
            raise RuntimeError(error_msg)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google
        creds_path = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS')
        if not os.path.exists(creds_path):
            error_msg = f"–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google –Ω–µ –Ω–∞–π–¥–µ–Ω: {creds_path}"
            logging.error(f"‚ùå {error_msg}")
            self.test_results['errors'].append(error_msg)
            raise RuntimeError(error_msg)
        
        logging.info("‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def step_1_export_client_data(self):
        """–®–∞–≥ 1: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î"""
        logging.info("=== –®–ê–ì 1: –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• –ö–õ–ò–ï–ù–¢–ê ===")
        step_name = "export_client_data"
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º data_exporter.py
            cmd = [sys.executable, "data_exporter.py", str(self.conv_id)]
            logging.info(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                cwd=os.getcwd()
            )
            
            if result.returncode != 0:
                error_msg = f"data_exporter.py –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}"
                logging.error(f"‚ùå {error_msg}")
                self.test_results['errors'].append(error_msg)
                self.test_results['steps'][step_name] = {
                    'status': 'FAILED',
                    'error': error_msg,
                    'stdout': result.stdout,
                    'stderr': result.stderr
                }
                return False
            
            # –ò—â–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –≤—ã–≤–æ–¥–µ
            stdout_lines = result.stdout.strip().split('\n')
            exported_file = None
            
            for line in stdout_lines:
                if '—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª:' in line or 'exported to:' in line:
                    exported_file = line.split(':')[-1].strip()
                    break
            
            if not exported_file or not os.path.exists(exported_file):
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
                import glob
                pattern = f"exported_data/client_data_{self.conv_id}_*.json"
                files = glob.glob(pattern)
                if files:
                    exported_file = max(files, key=os.path.getctime)  # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π
                    logging.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {exported_file}")
                else:
                    error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö"
                    logging.error(f"‚ùå {error_msg}")
                    self.test_results['errors'].append(error_msg)
                    self.test_results['steps'][step_name] = {
                        'status': 'FAILED',
                        'error': error_msg,
                        'stdout': result.stdout
                    }
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(exported_file, 'r', encoding='utf-8') as f:
                client_data = json.load(f)
            
            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {exported_file}")
            logging.info(f"üìä –ö–ª–∏–µ–Ω—Ç ID: {client_data.get('client_id')}")
            logging.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(client_data.get('recent_messages', []))}")
            logging.info(f"üìä –ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {client_data.get('purchased_products', [])}")
            
            self.test_results['files_created'].append(exported_file)
            self.test_results['steps'][step_name] = {
                'status': 'SUCCESS',
                'exported_file': exported_file,
                'client_data_summary': {
                    'client_id': client_data.get('client_id'),
                    'messages_count': len(client_data.get('recent_messages', [])),
                    'purchased_products': client_data.get('purchased_products', []),
                    'funnel_stage': client_data.get('funnel_stage'),
                    'client_activity': client_data.get('client_activity')
                }
            }
            
            return exported_file
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞: {e}"
            logging.error(f"‚ùå {error_msg}")
            logging.error(traceback.format_exc())
            self.test_results['errors'].append(error_msg)
            self.test_results['steps'][step_name] = {
                'status': 'FAILED',
                'error': error_msg,
                'traceback': traceback.format_exc()
            }
            return False
    
    def step_2_analyze_client_card(self, exported_file):
        """–®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ AI"""
        logging.info("=== –®–ê–ì 2: –ê–ù–ê–õ–ò–ó –ö–ê–†–¢–û–ß–ö–ò –ö–õ–ò–ï–ù–¢–ê ===")
        step_name = "analyze_client_card"
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º client_card_analyzer.py —Å —Ñ–∞–π–ª–æ–º –¥–∞–Ω–Ω—ã—Ö
            cmd = [sys.executable, "client_analyzer/client_card_analyzer.py", exported_file]
            logging.info(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                cwd=os.getcwd(),
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
            )
            
            if result.returncode != 0:
                error_msg = f"client_card_analyzer.py –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}"
                logging.error(f"‚ùå {error_msg}")
                self.test_results['errors'].append(error_msg)
                self.test_results['steps'][step_name] = {
                    'status': 'FAILED',
                    'error': error_msg,
                    'stdout': result.stdout,
                    'stderr': result.stderr
                }
                return False
            
            # –ò—â–µ–º —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ –≤—ã–≤–æ–¥–µ
            stdout_lines = result.stdout.strip().split('\n')
            analysis_file = None
            
            for line in stdout_lines:
                if '–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:' in line or 'saved in:' in line:
                    analysis_file = line.split(':')[-1].strip()
                    break
            
            if not analysis_file or not os.path.exists(analysis_file):
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
                import glob
                pattern = f"analysis_results/strategic_analysis_{self.conv_id}_*.json"
                files = glob.glob(pattern)
                if files:
                    analysis_file = max(files, key=os.path.getctime)  # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π
                    logging.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_file}")
                else:
                    error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"
                    logging.error(f"‚ùå {error_msg}")
                    self.test_results['errors'].append(error_msg)
                    self.test_results['steps'][step_name] = {
                        'status': 'FAILED',
                        'error': error_msg,
                        'stdout': result.stdout
                    }
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
            with open(analysis_file, 'r', encoding='utf-8') as f:
                analysis_data = json.load(f)
            
            logging.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω: {analysis_file}")
            logging.info(f"üìä –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏–¥–∞: {analysis_data.get('lead_qualification')}")
            logging.info(f"üìä –≠—Ç–∞–ø –≤–æ—Ä–æ–Ω–∫–∏: {analysis_data.get('funnel_stage')}")
            logging.info(f"üìä –£—Ä–æ–≤–µ–Ω—å –∫–ª–∏–µ–Ω—Ç–∞: {analysis_data.get('client_level')}")
            logging.info(f"üìä –¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è: {analysis_data.get('learning_goals')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            optimal_timing = analysis_data.get('optimal_reminder_timing', {})
            logging.info(f"üìä –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: —á–µ—Ä–µ–∑ {optimal_timing.get('contact_in_days')} –¥–Ω–µ–π")
            
            self.test_results['files_created'].append(analysis_file)
            self.test_results['steps'][step_name] = {
                'status': 'SUCCESS',
                'analysis_file': analysis_file,
                'analysis_summary': {
                    'lead_qualification': analysis_data.get('lead_qualification'),
                    'funnel_stage': analysis_data.get('funnel_stage'),
                    'client_level': analysis_data.get('client_level'),
                    'learning_goals': analysis_data.get('learning_goals'),
                    'optimal_timing_days': optimal_timing.get('contact_in_days'),
                    'action_priority': analysis_data.get('action_priority')
                }
            }
            
            return analysis_file
            
        except subprocess.TimeoutExpired:
            error_msg = "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–ø—Ä–µ–≤—ã—à–µ–Ω–æ 5 –º–∏–Ω—É—Ç)"
            logging.error(f"‚ùå {error_msg}")
            self.test_results['errors'].append(error_msg)
            self.test_results['steps'][step_name] = {
                'status': 'FAILED',
                'error': error_msg
            }
            return False
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}"
            logging.error(f"‚ùå {error_msg}")
            logging.error(traceback.format_exc())
            self.test_results['errors'].append(error_msg)
            self.test_results['steps'][step_name] = {
                'status': 'FAILED',
                'error': error_msg,
                'traceback': traceback.format_exc()
            }
            return False
    
    def step_3_parse_results(self, analysis_file):
        """–®–∞–≥ 3: –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î"""
        logging.info("=== –®–ê–ì 3: –ü–ê–†–°–ò–ù–ì –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–î ===")
        step_name = "parse_results_and_update_db"
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º results_parser.py
            cmd = [sys.executable, "client_analyzer/results_parser.py", analysis_file]
            logging.info(f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                cwd=os.getcwd(),
                timeout=120  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
            )
            
            if result.returncode != 0:
                error_msg = f"results_parser.py –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {result.stderr}"
                logging.error(f"‚ùå {error_msg}")
                self.test_results['errors'].append(error_msg)
                self.test_results['steps'][step_name] = {
                    'status': 'FAILED',
                    'error': error_msg,
                    'stdout': result.stdout,
                    'stderr': result.stderr
                }
                return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –ø–∞—Ä—Å–µ—Ä–∞
            stdout_lines = result.stdout.strip().split('\n')
            
            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            profile_updated = False
            reminder_created = False
            
            for line in stdout_lines:
                if '‚úÖ –ü–†–û–§–ò–õ–¨' in line and '–æ–±–Ω–æ–≤–ª–µ–Ω' in line:
                    profile_updated = True
                    logging.info(f"‚úÖ {line}")
                elif '‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ' in line or '‚úÖ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û' in line:
                    reminder_created = True
                    logging.info(f"‚úÖ {line}")
            
            logging.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            logging.info(f"üìä –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {profile_updated}")
            logging.info(f"üìä –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {reminder_created}")
            
            self.test_results['steps'][step_name] = {
                'status': 'SUCCESS',
                'profile_updated': profile_updated,
                'reminder_created': reminder_created,
                'parser_output': result.stdout
            }
            
            return True
            
        except subprocess.TimeoutExpired:
            error_msg = "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø—Ä–µ–≤—ã—à–µ–Ω–æ 2 –º–∏–Ω—É—Ç—ã)"
            logging.error(f"‚ùå {error_msg}")
            self.test_results['errors'].append(error_msg)
            self.test_results['steps'][step_name] = {
                'status': 'FAILED',
                'error': error_msg
            }
            return False
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}"
            logging.error(f"‚ùå {error_msg}")
            logging.error(traceback.format_exc())
            self.test_results['errors'].append(error_msg)
            self.test_results['steps'][step_name] = {
                'status': 'FAILED',
                'error': error_msg,
                'traceback': traceback.format_exc()
            }
            return False
    
    def step_4_verify_database_changes(self):
        """–®–∞–≥ 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î"""
        logging.info("=== –®–ê–ì 4: –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –ë–î ===")
        step_name = "verify_database_changes"
        
        try:
            import psycopg2
            from psycopg2.extras import DictCursor
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            DATABASE_URL = os.environ.get("DATABASE_URL")
            conn = psycopg2.connect(DATABASE_URL)
            
            with conn.cursor(cursor_factory=DictCursor) as cur:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞
                cur.execute("""
                    SELECT lead_qualification, funnel_stage, client_level, 
                           learning_goals, client_pains, last_analysis_at,
                           dialogue_summary
                    FROM user_profiles 
                    WHERE conv_id = %s
                """, (self.conv_id,))
                
                profile = cur.fetchone()
                
                if not profile:
                    error_msg = f"–ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ {self.conv_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
                    logging.error(f"‚ùå {error_msg}")
                    self.test_results['errors'].append(error_msg)
                    self.test_results['steps'][step_name] = {
                        'status': 'FAILED',
                        'error': error_msg
                    }
                    conn.close()
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                cur.execute("""
                    SELECT id, reminder_datetime, reminder_context_summary, 
                           status, created_at
                    FROM reminders 
                    WHERE conv_id = %s 
                    ORDER BY created_at DESC 
                    LIMIT 5
                """, (self.conv_id,))
                
                reminders = cur.fetchall()
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–≤–µ–∂–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç)
                recent_reminders = []
                current_time = datetime.now(timezone.utc)
                
                for reminder in reminders:
                    created_at = reminder['created_at']
                    if created_at.tzinfo is None:
                        created_at = created_at.replace(tzinfo=timezone.utc)
                    
                    time_diff = (current_time - created_at).total_seconds()
                    if time_diff < 600:  # 10 –º–∏–Ω—É—Ç
                        recent_reminders.append(reminder)
                
                logging.info(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω –≤ –ë–î:")
                logging.info(f"üìä –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è: {profile['lead_qualification']}")
                logging.info(f"üìä –≠—Ç–∞–ø –≤–æ—Ä–æ–Ω–∫–∏: {profile['funnel_stage']}")
                logging.info(f"üìä –£—Ä–æ–≤–µ–Ω—å: {profile['client_level']}")
                logging.info(f"üìä –¶–µ–ª–∏: {profile['learning_goals']}")
                logging.info(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑: {profile['last_analysis_at']}")
                
                if recent_reminders:
                    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(recent_reminders)} —Å–≤–µ–∂–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:")
                    for reminder in recent_reminders:
                        logging.info(f"üìä ID {reminder['id']}: {reminder['reminder_datetime']} - {reminder['reminder_context_summary'][:100]}...")
                else:
                    logging.warning("‚ö†Ô∏è –°–≤–µ–∂–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                conn.close()
                
                self.test_results['steps'][step_name] = {
                    'status': 'SUCCESS',
                    'profile_found': True,
                    'profile_data': {
                        'lead_qualification': profile['lead_qualification'],
                        'funnel_stage': profile['funnel_stage'],
                        'client_level': profile['client_level'],
                        'learning_goals': profile['learning_goals'],
                        'last_analysis_at': str(profile['last_analysis_at']) if profile['last_analysis_at'] else None
                    },
                    'reminders_count': len(reminders),
                    'recent_reminders_count': len(recent_reminders),
                    'recent_reminders': [
                        {
                            'id': r['id'],
                            'datetime': str(r['reminder_datetime']),
                            'summary': r['reminder_context_summary'][:200],
                            'status': r['status']
                        } for r in recent_reminders
                    ]
                }
                
                return True
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ë–î: {e}"
            logging.error(f"‚ùå {error_msg}")
            logging.error(traceback.format_exc())
            self.test_results['errors'].append(error_msg)
            self.test_results['steps'][step_name] = {
                'status': 'FAILED',
                'error': error_msg,
                'traceback': traceback.format_exc()
            }
            return False
    
    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        logging.info(f"==========================================")
        logging.info(f"–ù–ê–ß–ê–õ–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê: {TEST_NAME}")
        logging.info(f"–ö–ª–∏–µ–Ω—Ç conv_id: {self.conv_id}")
        logging.info(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.test_results['start_time']}")
        logging.info(f"==========================================")
        
        try:
            # –®–∞–≥ 1: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞
            exported_file = self.step_1_export_client_data()
            if not exported_file:
                self.test_results['success'] = False
                return self.generate_final_report()
            
            # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
            analysis_file = self.step_2_analyze_client_card(exported_file)
            if not analysis_file:
                self.test_results['success'] = False
                return self.generate_final_report()
            
            # –®–∞–≥ 3: –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
            parse_success = self.step_3_parse_results(analysis_file)
            if not parse_success:
                self.test_results['success'] = False
                return self.generate_final_report()
            
            # –®–∞–≥ 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î
            verify_success = self.step_4_verify_database_changes()
            if not verify_success:
                self.test_results['success'] = False
                return self.generate_final_report()
            
            # –í—Å–µ —à–∞–≥–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
            self.test_results['success'] = True
            return self.generate_final_report()
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}"
            logging.error(f"‚ùå {error_msg}")
            logging.error(traceback.format_exc())
            self.test_results['errors'].append(error_msg)
            self.test_results['success'] = False
            return self.generate_final_report()
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–µ"""
        self.test_results['end_time'] = datetime.now(timezone.utc).isoformat()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = datetime.fromisoformat(self.test_results['start_time'].replace('Z', '+00:00'))
        end_time = datetime.fromisoformat(self.test_results['end_time'].replace('Z', '+00:00'))
        duration = (end_time - start_time).total_seconds()
        self.test_results['duration_seconds'] = duration
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"test_report_real_client_{self.conv_id}_{timestamp}.json"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, ensure_ascii=False, indent=2)
        
        logging.info(f"==========================================")
        logging.info(f"–ó–ê–í–ï–†–®–ï–ù–ò–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ê: {TEST_NAME}")
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–°–ü–ï–®–ù–û' if self.test_results['success'] else '‚ùå –ù–ï–£–î–ê–ß–ù–û'}")
        logging.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —Å–µ–∫—É–Ω–¥")
        logging.info(f"–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(self.test_results['files_created'])}")
        logging.info(f"–û—à–∏–±–æ–∫: {len(self.test_results['errors'])}")
        logging.info(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        logging.info(f"==========================================")
        
        return self.test_results


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞"""
    try:
        tester = RealClientTester()
        results = tester.run_full_test()
        
        if results['success']:
            print(f"\n[SUCCESS] –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
            print(f"[OK] –í—Å–µ —ç—Ç–∞–ø—ã –∫–∞—Å–∫–∞–¥–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
            print(f"   1. [OK] –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î")
            print(f"   2. [OK] AI –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞")
            print(f"   3. [OK] –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î")
            print(f"   4. [OK] –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î")
            print(f"\n[INFO] –°–í–û–î–ö–ê –ü–û –ö–õ–ò–ï–ù–¢–£ {TARGET_CONV_ID}:")
            
            # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
            for step_name, step_data in results['steps'].items():
                if step_data['status'] == 'SUCCESS':
                    print(f"   [STEP] {step_name}: SUCCESS")
        else:
            print(f"\n[ERROR] –¢–ï–°–¢ –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–ê–ú–ò!")
            print(f"[ERROR] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {len(results['errors'])}")
            for error in results['errors']:
                print(f"   [ERR] {error}")
        
        return 0 if results['success'] else 1
        
    except Exception as e:
        print(f"\n[CRITICAL] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logging.error(traceback.format_exc())
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)