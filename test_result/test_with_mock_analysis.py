#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å –º–æ–∫-–∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI
"""

import json
import logging
import os
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
sys.path.insert(0, str(Path(__file__).parent.parent))

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_mock_analysis_result(client_id):
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return {
        "client_id": client_id,
        "analysis_timestamp": datetime.now().isoformat(),
        "client_qualification": {
            "current_level": "–≥–æ—Ä—è—á–∏–π",
            "confidence_score": 0.85,
            "reasoning": "–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—è–≤–ª—è–µ—Ç –≤—ã—Å–æ–∫–∏–π –∏–Ω—Ç–µ—Ä–µ—Å, –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–µ, –∏–º–µ–µ—Ç –º—É–∑—ã–∫–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
        },
        "funnel_stage_analysis": {
            "current_stage": "—Å–¥–µ–ª–∞–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º",
            "next_stage": "–ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è",
            "stage_confidence": 0.8,
            "barriers_to_next_stage": ["—Ü–µ–Ω–∞", "–≤—Ä–µ–º—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ"]
        },
        "psychological_profile": {
            "personality_type": "perfectionist_learner",
            "primary_motivation": "—Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –º—É–∑—ã–∫—É",
            "communication_style": "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –æ—Ç–∫—Ä—ã—Ç—ã–π",
            "decision_making_style": "–æ–±–¥—É–º–∞–Ω–Ω—ã–π, —Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏",
            "learning_style": "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–æ–π –±–∞–∑–æ–π"
        },
        "activity_analysis": {
            "last_activity": "2025-08-19",
            "message_frequency": "—Å—Ä–µ–¥–Ω—è—è",
            "response_time": "–±—ã—Å—Ç—Ä—ã–π",
            "initiative_level": "–≤—ã—Å–æ–∫–∏–π",
            "engagement_trend": "—Ä–∞—Å—Ç—É—â–∏–π"
        },
        "conversation_gaps": {
            "longest_gap": "4 –º–µ—Å—è—Ü–∞",
            "recent_gap_duration": "0 –¥–Ω–µ–π",
            "gap_pattern": "–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—É–∑—ã",
            "reasons": ["—Å–æ–º–Ω–µ–Ω–∏—è –≤ —Ü–µ–Ω–µ", "–≤–Ω–µ—à–Ω–∏–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ (—É–≤–æ–ª—å–Ω–µ–Ω–∏–µ)"]
        },
        "pain_points_analysis": {
            "primary_pains": [
                "–ø–æ—Ç–µ—Ä—è –Ω–∞–≤—ã–∫–æ–≤ ('–≤—Å–µ –∑–∞–±—ã–ª')",
                "–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ '–∂–∏–≤–æ–π' –∏–≥—Ä—ã", 
                "—á—É–≤—Å—Ç–≤–æ —Å—Ç—ã–¥–∞ –æ—Ç –Ω–µ—É–º–µ–Ω–∏—è –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
                "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ"
            ],
            "emotional_state": "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–∞–¥–µ–∂–¥–æ–π –Ω–∞ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ",
            "urgency_level": "–≤—ã—Å–æ–∫–∞—è",
            "pain_intensity": 8
        },
        "interests_analysis": {
            "primary_interests": [
                "–∏–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è",
                "–∞–∫–∫–æ–º–ø–∞–Ω–µ–º–µ–Ω—Ç", 
                "–∞—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∞",
                "–∏–≥—Ä–∞ –±–µ–∑ –Ω–æ—Ç",
                "—Å–≤–æ–±–æ–¥–Ω–∞—è –∏–≥—Ä–∞"
            ],
            "learning_goals": "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ + –æ—Å–≤–æ–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏",
            "musical_preferences": "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞, –ª–∏—á–Ω–æ–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ",
            "commitment_level": "–≤—ã—Å–æ–∫–∏–π"
        },
        "return_strategy": {
            "recommended_actions": [
                "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å–∫–∏–¥–∫–æ–π —É—á–∏—Ç—ã–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—é —Å —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ–º",
                "–ê–∫—Ü–µ–Ω—Ç –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–æ—Å—Ç–∞–≤–ª—è—é—â–µ - '–≤–µ—Ä–Ω—É—Ç—å –∂–∏–∑–Ω—å –≤ –∏–≥—Ä—É'",
                "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
                "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥—Ä—É–≥–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º –±—ç–∫–≥—Ä–∞—É–Ω–¥–æ–º"
            ],
            "key_insights": [
                "–ö–ª–∏–µ–Ω—Ç –∏—â–µ—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–±—É—á–µ–Ω–∏–µ, –∞ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ —Å—Ç—Ä–∞—Å—Ç–∏ –∫ –º—É–∑—ã–∫–µ",
                "–í–∞–∂–Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ",
                "–¶–µ–Ω–∞ –≤—Ç–æ—Ä–∏—á–Ω–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–∏"
            ],
            "approach_style": "—ç–º–ø–∞—Ç–∏—á–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π",
            "content_focus": "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —ç–º–æ—Ü–∏–∏ –æ—Ç –∏–≥—Ä—ã"
        },
        "next_contact_timing": {
            "recommended_timing": "1-2 –¥–Ω—è",
            "optimal_time": "–≤–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è (18-20)",
            "contact_method": "–ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "urgency_reason": "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—ä–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
        },
        "product_recommendations": {
            "primary_recommendation": "–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å —Å–≤–æ–±–æ–¥–Ω–æ–π –∏–≥—Ä—ã",
            "secondary_options": [
                "–ö—É—Ä—Å –∏–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏–∏",
                "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è"
            ],
            "pricing_strategy": "flexible_with_discount",
            "value_proposition": "–≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Å—Ç–∏"
        },
        "risk_assessment": {
            "churn_probability": 0.3,
            "engagement_level": "high",
            "conversion_probability": 0.7,
            "risk_factors": [
                "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è",
                "–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—É–∑—ã"
            ],
            "protection_measures": [
                "–≥–∏–±–∫–∏–µ —É—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã",
                "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è"
            ]
        },
        "strategic_recommendations": {
            "immediate_actions": [
                "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24-48 —á–∞—Å–æ–≤",
                "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è",
                "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ"
            ],
            "long_term_strategy": "nurturing —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–æ—Å—Ç–∞–≤–ª—è—é—â—É—é",
            "success_metrics": [
                "–æ—Ç–∫–ª–∏–∫ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                "—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
                "–∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –Ω–µ–¥–µ–ª—å"
            ],
            "alternative_scenarios": [
                "–µ—Å–ª–∏ –æ—Ç–∫–∞–∑ - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π nurturing",
                "–µ—Å–ª–∏ –º–æ–ª—á–∞–Ω–∏–µ - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é"
            ]
        }
    }

def test_full_pipeline():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏"""
    logger.info("=== –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –° –ú–û–ö-–î–ê–ù–ù–´–ú–ò ===")
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        client_id = "515099352"
        mock_analysis = create_mock_analysis_result(client_id)
        
        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        result_file = Path("analysis_result_mock_515099352_" + timestamp + ".json")
        
        with open(result_file, 'w', encoding='utf-8') as f:
            json.dump(mock_analysis, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ –ú–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω: {result_file}")
        
        # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–Ω–∞–ª–∏–∑–∞
        logger.info("üìä –°–¢–†–£–ö–¢–£–†–ê –ê–ù–ê–õ–ò–ó–ê:")
        for section, data in mock_analysis.items():
            if section != "client_id" and section != "analysis_timestamp":
                logger.info(f"   ‚úÖ {section}")
                if isinstance(data, dict) and len(data) > 0:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 1-2 –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª—è
                    for key, value in list(data.items())[:2]:
                        if isinstance(value, str) and len(value) < 100:
                            logger.info(f"      ‚îî‚îÄ {key}: {value}")
                        elif isinstance(value, list) and len(value) > 0:
                            logger.info(f"      ‚îî‚îÄ {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
        parser_file = Path("results_parser.py")
        if parser_file.exists():
            logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î)...")
            logger.info(f"   –§–∞–π–ª –ø–∞—Ä—Å–µ—Ä–∞: {parser_file}")
            logger.info(f"   –î–ª—è –∑–∞–ø—É—Å–∫–∞: python {parser_file} {result_file}")
        
        logger.info("‚úÖ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –ü–ê–ô–ü–õ–ê–ô–ù–ê –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –° –ú–û–ö-–î–ê–ù–ù–´–ú–ò")
    logger.info("=" * 50)
    
    success = test_full_pipeline()
    
    if success:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        logger.info("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ AI API")
    else:
        logger.error("‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
    
    return success

if __name__ == "__main__":
    main()